/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Customer;

import SQL.SQLStore;

//Import packages we make here
import Global.Lists;
import Global.Game;
import Global.GameDisplay;
import Global.Methods;
import java.awt.Dimension;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.*;

import Login.LogonPage;
import Global.Variables;
import Manager.ManagerView;
import SQL.GeneralSQL;
import com.mysql.cj.jdbc.Blob;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author karso
 */
public class StorePage extends javax.swing.JFrame {

    //Create a logon page object here
    LogonPage login = null;
    CartPage cart = null;
    ManagerView manager = null;

    /**
     * Creates new form StorePage
     */
    public StorePage(LogonPage logon) {
        initComponents();

        login = logon;

        cart = new CartPage(this, login);
        itemDisplay.getVerticalScrollBar().setUnitIncrement(16);
        consoleFilters.getVerticalScrollBar().setUnitIncrement(8);
        genreFilters.getVerticalScrollBar().setUnitIncrement(8);

        //make sure the filters are created when this is created
        //SQLStore.createFilterLists();
    }

    //An integer to hold the quantity
    static int index = 0;

    //a constant to hold the previous size for the item container
    //this is so we dont have to find it and redefine it everytime the original size changes
    //Dimension PREVIOUS_SIZE = itemContainer.getSize();
    //create a cart page
    //CartPage cart = new CartPage(this, login);
    //a variable for the orignal dimension size
    Dimension originalSize = new Dimension(898, 400);

    //am array list for the game display
    ArrayList<GameDisplay> gamesDisplayed = new ArrayList<GameDisplay>();

    //an index for the game display
    int selectedGame = 0;
    int previousIndex = 0;

    //an array list for storing filters
    ArrayList<JCheckBox> consoleFiltersList = new ArrayList<JCheckBox>();
    ArrayList<JCheckBox> genreFiltersList = new ArrayList<JCheckBox>();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        controlPanel = new javax.swing.JPanel();
        refreshButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();
        cartButton = new javax.swing.JButton();
        cartAmount = new javax.swing.JLabel();
        logOutButton = new javax.swing.JButton();
        controlsLabel = new javax.swing.JLabel();
        controls1 = new javax.swing.JLabel();
        controls2 = new javax.swing.JLabel();
        controls3 = new javax.swing.JLabel();
        helpButton = new javax.swing.JButton();
        contextPanel = new javax.swing.JPanel();
        panelContainers = new javax.swing.JLayeredPane();
        gamePanel = new javax.swing.JPanel();
        image = new javax.swing.JLabel();
        buyButton = new javax.swing.JButton();
        quanity = new javax.swing.JLabel();
        price = new javax.swing.JLabel();
        amountBuying = new javax.swing.JSpinner();
        amountBuyingLabel = new javax.swing.JLabel();
        returnButton = new javax.swing.JButton();
        totalLabel = new javax.swing.JLabel();
        infoContainer = new javax.swing.JLayeredPane();
        gameSystem = new javax.swing.JLabel();
        gameGenre = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        gameTitle = new javax.swing.JTextArea();
        warning1 = new javax.swing.JLabel();
        warning2 = new javax.swing.JLabel();
        gameDescription = new javax.swing.JTextArea();
        soldOut = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        filtersPanel = new javax.swing.JPanel();
        consoleLabel = new javax.swing.JLabel();
        genreLabel = new javax.swing.JLabel();
        genreAll = new javax.swing.JButton();
        consoleAll = new javax.swing.JButton();
        filterInstructions = new javax.swing.JLabel();
        consoleFilters = new javax.swing.JScrollPane();
        consoleFiltersPanel = new javax.swing.JPanel();
        genreFilters = new javax.swing.JScrollPane();
        genreFiltersPanel = new javax.swing.JPanel();
        searchPanel = new javax.swing.JPanel();
        searchBar = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        filtersButton = new javax.swing.JToggleButton();
        itemDisplay = new javax.swing.JScrollPane();
        itemContainer = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 48, 90));
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/UsedGamesLogo.png")).getImage());

        controlPanel.setBackground(new java.awt.Color(65, 146, 217));
        controlPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        refreshButton.setBackground(new java.awt.Color(0, 48, 90));
        refreshButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        refreshButton.setForeground(new java.awt.Color(255, 255, 255));
        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        quitButton.setBackground(new java.awt.Color(0, 48, 90));
        quitButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        quitButton.setForeground(new java.awt.Color(255, 255, 255));
        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        cartButton.setBackground(new java.awt.Color(0, 48, 90));
        cartButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        cartButton.setForeground(new java.awt.Color(255, 255, 255));
        cartButton.setText("View Cart");
        cartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cartButtonActionPerformed(evt);
            }
        });

        cartAmount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cartAmount.setText("In Cart: ");

        logOutButton.setBackground(new java.awt.Color(0, 48, 90));
        logOutButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        logOutButton.setForeground(new java.awt.Color(255, 255, 255));
        logOutButton.setText("Log Out");
        logOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutButtonActionPerformed(evt);
            }
        });

        controlsLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        controlsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        controlsLabel.setText("Controls");

        controls1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        controls1.setText("WASD to move");

        controls2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        controls2.setText("Arrow keys to scroll");

        controls3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        controls3.setText("SPACE to select");

        helpButton.setBackground(new java.awt.Color(0, 48, 90));
        helpButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        helpButton.setForeground(new java.awt.Color(255, 255, 255));
        helpButton.setText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(refreshButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(quitButton, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
            .addComponent(cartButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(logOutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(controls3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(controls2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(controlsLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cartAmount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(controls1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(helpButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelLayout.createSequentialGroup()
                .addComponent(cartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cartAmount)
                .addGap(36, 36, 36)
                .addComponent(controlsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(controls1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(controls2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(controls3)
                .addGap(18, 18, 18)
                .addComponent(helpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(quitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        gamePanel.setBackground(new java.awt.Color(65, 146, 217));

        image.setBackground(new java.awt.Color(51, 51, 51));
        image.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        image.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        image.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MainImagePlaceholder.png"))); // NOI18N
        image.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        buyButton.setBackground(new java.awt.Color(0, 48, 90));
        buyButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        buyButton.setForeground(new java.awt.Color(255, 255, 255));
        buyButton.setText("Add to Cart");
        buyButton.setToolTipText("");
        buyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyButtonActionPerformed(evt);
            }
        });

        quanity.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        quanity.setText("jLabel1");

        price.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        price.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        price.setText("jLabel1");

        amountBuying.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                amountBuyingStateChanged(evt);
            }
        });

        amountBuyingLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        amountBuyingLabel.setText("Quantity:");

        returnButton.setBackground(new java.awt.Color(0, 48, 90));
        returnButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        returnButton.setForeground(new java.awt.Color(255, 255, 255));
        returnButton.setText("Return");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        totalLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        totalLabel.setText("Total: $0.00");

        gameSystem.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        gameSystem.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gameSystem.setText("System");

        gameGenre.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        gameGenre.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gameGenre.setText("Genre");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane1.setWheelScrollingEnabled(false);

        gameTitle.setEditable(false);
        gameTitle.setColumns(20);
        gameTitle.setLineWrap(true);
        gameTitle.setRows(5);
        gameTitle.setWrapStyleWord(true);
        jScrollPane1.setViewportView(gameTitle);

        infoContainer.setLayer(gameSystem, javax.swing.JLayeredPane.DEFAULT_LAYER);
        infoContainer.setLayer(gameGenre, javax.swing.JLayeredPane.DEFAULT_LAYER);
        infoContainer.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout infoContainerLayout = new javax.swing.GroupLayout(infoContainer);
        infoContainer.setLayout(infoContainerLayout);
        infoContainerLayout.setHorizontalGroup(
            infoContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(infoContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoContainerLayout.createSequentialGroup()
                        .addComponent(gameSystem, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(128, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)))
            .addGroup(infoContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, infoContainerLayout.createSequentialGroup()
                    .addGap(0, 133, Short.MAX_VALUE)
                    .addComponent(gameGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        infoContainerLayout.setVerticalGroup(
            infoContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, infoContainerLayout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gameSystem, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(infoContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(infoContainerLayout.createSequentialGroup()
                    .addGap(104, 104, 104)
                    .addComponent(gameGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        warning1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        warning1.setForeground(java.awt.Color.red);
        warning1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        warning1.setText("An Error Occured");

        warning2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        warning2.setForeground(java.awt.Color.red);
        warning2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        warning2.setText("Please try again or refresh");

        gameDescription.setEditable(false);
        gameDescription.setColumns(20);
        gameDescription.setRows(5);
        gameDescription.setToolTipText("");
        gameDescription.setWrapStyleWord(true);

        soldOut.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        soldOut.setForeground(java.awt.Color.red);
        soldOut.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        soldOut.setText("This product is sold out");
        soldOut.setToolTipText("");

        javax.swing.GroupLayout gamePanelLayout = new javax.swing.GroupLayout(gamePanel);
        gamePanel.setLayout(gamePanelLayout);
        gamePanelLayout.setHorizontalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(image, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
            .addGroup(gamePanelLayout.createSequentialGroup()
                .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gamePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(infoContainer)
                            .addComponent(amountBuyingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(amountBuying, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(buyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(gamePanelLayout.createSequentialGroup()
                                .addComponent(quanity, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(returnButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(totalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(warning1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(warning2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(soldOut, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(gamePanelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(gameDescription)))
                .addContainerGap())
        );
        gamePanelLayout.setVerticalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gamePanelLayout.createSequentialGroup()
                .addComponent(image, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(infoContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(gameDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quanity, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(amountBuyingLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(amountBuying, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalLabel)
                .addGap(18, 18, 18)
                .addComponent(warning1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(warning2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(soldOut)
                .addGap(18, 18, 18)
                .addComponent(returnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        panelContainers.setLayer(gamePanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout panelContainersLayout = new javax.swing.GroupLayout(panelContainers);
        panelContainers.setLayout(panelContainersLayout);
        panelContainersLayout.setHorizontalGroup(
            panelContainersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelContainersLayout.setVerticalGroup(
            panelContainersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout contextPanelLayout = new javax.swing.GroupLayout(contextPanel);
        contextPanel.setLayout(contextPanelLayout);
        contextPanelLayout.setHorizontalGroup(
            contextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelContainers)
        );
        contextPanelLayout.setVerticalGroup(
            contextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelContainers)
        );

        filtersPanel.setBackground(new java.awt.Color(65, 146, 217));
        filtersPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        consoleLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        consoleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        consoleLabel.setText("Console Filters");

        genreLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        genreLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        genreLabel.setText("Genre Filters");

        genreAll.setBackground(new java.awt.Color(0, 48, 90));
        genreAll.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        genreAll.setForeground(new java.awt.Color(255, 255, 255));
        genreAll.setText("Check All");
        genreAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genreAllActionPerformed(evt);
            }
        });

        consoleAll.setBackground(new java.awt.Color(0, 48, 90));
        consoleAll.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        consoleAll.setForeground(new java.awt.Color(255, 255, 255));
        consoleAll.setText("Check All");
        consoleAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consoleAllActionPerformed(evt);
            }
        });

        filterInstructions.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        filterInstructions.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        filterInstructions.setText("Click to toggle filters");

        consoleFilters.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        javax.swing.GroupLayout consoleFiltersPanelLayout = new javax.swing.GroupLayout(consoleFiltersPanel);
        consoleFiltersPanel.setLayout(consoleFiltersPanelLayout);
        consoleFiltersPanelLayout.setHorizontalGroup(
            consoleFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 191, Short.MAX_VALUE)
        );
        consoleFiltersPanelLayout.setVerticalGroup(
            consoleFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 216, Short.MAX_VALUE)
        );

        consoleFilters.setViewportView(consoleFiltersPanel);

        genreFilters.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        javax.swing.GroupLayout genreFiltersPanelLayout = new javax.swing.GroupLayout(genreFiltersPanel);
        genreFiltersPanel.setLayout(genreFiltersPanelLayout);
        genreFiltersPanelLayout.setHorizontalGroup(
            genreFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 191, Short.MAX_VALUE)
        );
        genreFiltersPanelLayout.setVerticalGroup(
            genreFiltersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 216, Short.MAX_VALUE)
        );

        genreFilters.setViewportView(genreFiltersPanel);

        javax.swing.GroupLayout filtersPanelLayout = new javax.swing.GroupLayout(filtersPanel);
        filtersPanel.setLayout(filtersPanelLayout);
        filtersPanelLayout.setHorizontalGroup(
            filtersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filtersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filtersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(consoleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(genreLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(genreAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(consoleAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(filterInstructions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(consoleFilters)
                    .addComponent(genreFilters, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        filtersPanelLayout.setVerticalGroup(
            filtersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filtersPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(filterInstructions)
                .addGap(18, 18, 18)
                .addComponent(consoleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(consoleAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(consoleFilters, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(genreLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(genreAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(genreFilters, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        searchPanel.setBackground(new java.awt.Color(122, 186, 242));
        searchPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        searchButton.setBackground(new java.awt.Color(0, 48, 90));
        searchButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        searchButton.setForeground(new java.awt.Color(255, 255, 255));
        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        filtersButton.setBackground(new java.awt.Color(0, 48, 90));
        filtersButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        filtersButton.setForeground(new java.awt.Color(255, 255, 255));
        filtersButton.setText("Browse Filters");
        filtersButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                filtersButtonItemStateChanged(evt);
            }
        });
        filtersButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                filtersButtonKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(filtersButton)
                .addContainerGap())
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton)
                    .addComponent(filtersButton))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        itemDisplay.setBackground(new java.awt.Color(0, 75, 141));
        itemDisplay.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        itemDisplay.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        itemDisplay.setViewportView(itemContainer);
        itemDisplay.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                itemDisplayFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                itemDisplayFocusLost(evt);
            }
        });
        itemDisplay.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                itemDisplayKeyPressed(evt);
            }
        });

        itemContainer.setBackground(new java.awt.Color(0, 75, 141));
        itemContainer.setPreferredSize(new java.awt.Dimension(898, 571));

        javax.swing.GroupLayout itemContainerLayout = new javax.swing.GroupLayout(itemContainer);
        itemContainer.setLayout(itemContainerLayout);
        itemContainerLayout.setHorizontalGroup(
            itemContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 898, Short.MAX_VALUE)
        );
        itemContainerLayout.setVerticalGroup(
            itemContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 761, Short.MAX_VALUE)
        );

        itemDisplay.setViewportView(itemContainer);

        jLayeredPane1.setLayer(filtersPanel, javax.swing.JLayeredPane.PALETTE_LAYER);
        jLayeredPane1.setLayer(searchPanel, javax.swing.JLayeredPane.PALETTE_LAYER);
        jLayeredPane1.setLayer(itemDisplay, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(itemDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 772, Short.MAX_VALUE)
                    .addComponent(searchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                    .addContainerGap(573, Short.MAX_VALUE)
                    .addComponent(filtersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(itemDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 763, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addGap(45, 45, 45)
                    .addComponent(filtersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(126, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 782, Short.MAX_VALUE)
                .addComponent(contextPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(178, 178, 178)
                    .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(261, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(controlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(contextPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.Alignment.TRAILING))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        //Redisplay data
        SQLStore.loadGames();
        searchGames();
        displayGame(Variables.chosenGame);
        long endTime = System.nanoTime();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        //Quit the program
        System.exit(0);
    }//GEN-LAST:event_quitButtonActionPerformed

    private void amountBuyingStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_amountBuyingStateChanged

        //Here we will check for the amount being asked for and act accordingly
        //We need to store the value
        int tempAmount = (int) amountBuying.getValue();

        //First lets check if it becomes negative
        if (tempAmount < 0) {

            amountBuying.setValue(0);
            //Just set it back to 0

        }

        //and now check if the amount is more than the amount we have
        if (tempAmount > Lists.games.get(index).quantity) {

            amountBuying.setValue(Lists.games.get(index).quantity);
            //set it to the max quantity we have

        }

        totalLabel.setText("Total: $" + String.format("%.2f", (Lists.games.get(index).price * (int) amountBuying.getValue())));

    }//GEN-LAST:event_amountBuyingStateChanged

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed

        //use a method
        searchGames();

    }//GEN-LAST:event_searchButtonActionPerformed

    private void buyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyButtonActionPerformed
        //This will add the product and its quantity to the cart

        //first thing we need to do is to take away the amount asked for from the database
        //Or well check if we can
        //however we should also check if there is any desired amount
        if ((int) amountBuying.getValue() > 0) {

            System.out.println(index);
            warning1.setVisible(false);
            warning2.setVisible(false);
            soldOut.setVisible(false);

            if (!SQLStore.addCart(Lists.games.get(index).name, Lists.games.get(index).system, (int) amountBuying.getValue(), Lists.games.get(index).gameID, Variables.customerID, Lists.games.get(index).price)) {

                warning1.setVisible(true);
                warning2.setVisible(true);

            }

            cartAmount.setText("In Cart: " + Lists.cart.size());

            //now redisplay the data
            //SQLStore.loadGames();
            //displayGame(Variables.chosenGame);
        } else if(Lists.games.get(index).quantity != 0 && (int) amountBuying.getValue() == 0){

            System.out.println(index);
            warning1.setVisible(false);
            warning2.setVisible(false);

            if (!SQLStore.addCart(Lists.games.get(index).name, Lists.games.get(index).system, 1, Lists.games.get(index).gameID, Variables.customerID, Lists.games.get(index).price)) {

                warning1.setVisible(true);
                warning2.setVisible(true);

            }

            cartAmount.setText("In Cart: " + Lists.cart.size());

        }else{
        
           soldOut.setVisible(true); 
            
        }


    }//GEN-LAST:event_buyButtonActionPerformed

    private void cartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cartButtonActionPerformed
        this.dispose();
        cart.open();
    }//GEN-LAST:event_cartButtonActionPerformed

    private void logOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutButtonActionPerformed
        this.dispose();

        Lists.cart.clear();

        if (Variables.currentLevel.equals("Customer")) {

            login.run();

        } else {

            try {
                manager.open();
            } catch (ParseException ex) {
                Logger.getLogger(StorePage.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }//GEN-LAST:event_logOutButtonActionPerformed

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        gamePanel.setVisible(false);
        Variables.chosenGame = -1;

        //request focus again for the scroll pane
        itemDisplay.requestFocus();

    }//GEN-LAST:event_returnButtonActionPerformed

    private void filtersButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filtersButtonItemStateChanged

        if (filtersButton.isSelected()) {

            filtersPanel.setVisible(true);

            filtersButton.setText("Hide Filters");

        } else if (!filtersButton.isSelected()) {

            filtersPanel.setVisible(false);
            filtersButton.setText("Browse Filters");

        }


    }//GEN-LAST:event_filtersButtonItemStateChanged

    private void consoleAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consoleAllActionPerformed

        //go through the entire list and set all the searched fors to yes
        for (int x = 0; x < consoleFiltersList.size(); x++) {

            consoleFiltersList.get(x).setSelected(true);

        }
        searchGames();

    }//GEN-LAST:event_consoleAllActionPerformed

    private void genreAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genreAllActionPerformed

        for (int x = 0; x < genreFiltersList.size(); x++) {

            genreFiltersList.get(x).setSelected(true);

        }

        searchGames();

    }//GEN-LAST:event_genreAllActionPerformed

    private void filtersButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filtersButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_TAB && !filtersPanel.isVisible()) {

            itemDisplay.requestFocus();

            //selectedGame = 0;
            gamesDisplayed.get(selectedGame).highlight();

        }
    }//GEN-LAST:event_filtersButtonKeyPressed

    private void itemDisplayKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemDisplayKeyPressed

        previousIndex = selectedGame;

        if (evt.getKeyCode() == KeyEvent.VK_W) {

            selectedGame -= 3;

            if (selectedGame < 0) {

                selectedGame = gamesDisplayed.size() - 1;

            }

            gamesDisplayed.get(selectedGame).highlight();
            gamesDisplayed.get(previousIndex).revert();

        } else if (evt.getKeyCode() == KeyEvent.VK_S) {

            selectedGame += 3;

            if (selectedGame >= gamesDisplayed.size()) {

                selectedGame = 0;

            }

            gamesDisplayed.get(selectedGame).highlight();
            gamesDisplayed.get(previousIndex).revert();

        } else if (evt.getKeyCode() == KeyEvent.VK_A) {

            selectedGame -= 1;

            if (selectedGame < 0) {

                selectedGame = gamesDisplayed.size() - 1;

            }

            gamesDisplayed.get(selectedGame).highlight();
            gamesDisplayed.get(previousIndex).revert();

        } else if (evt.getKeyCode() == KeyEvent.VK_D) {

            selectedGame += 1;

            if (selectedGame >= gamesDisplayed.size()) {

                selectedGame = 0;

            }

            gamesDisplayed.get(selectedGame).highlight();
            gamesDisplayed.get(previousIndex).revert();

        }

        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {

            displayGame(gamesDisplayed.get(selectedGame).indexHeld);

        }

    }//GEN-LAST:event_itemDisplayKeyPressed

    private void itemDisplayFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_itemDisplayFocusLost
        gamesDisplayed.get(selectedGame).revert();

        controlsLabel.setVisible(false);
        controls1.setVisible(false);
        controls2.setVisible(false);
        controls3.setVisible(false);

    }//GEN-LAST:event_itemDisplayFocusLost

    private void itemDisplayFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_itemDisplayFocusGained
        // TODO add your handling code here:

        gamesDisplayed.get(selectedGame).highlight();

        controlsLabel.setVisible(true);
        controls1.setVisible(true);
        controls2.setVisible(true);
        controls3.setVisible(true);
    }//GEN-LAST:event_itemDisplayFocusGained

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        try {
            //Open up a pdf for a help file
            URL helpURL = new URL("https://drive.google.com/file/d/1ALrUO5yQLh9XgUSC4xi0H_CL_QuMeZ6g/view?usp=sharing");
            try {
                Desktop.getDesktop().browse(helpURL.toURI());
            } catch (URISyntaxException ex) {
                Logger.getLogger(StorePage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(StorePage.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (MalformedURLException ex) {
            Logger.getLogger(StorePage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_helpButtonActionPerformed

    /**
     * //@param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(StorePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(StorePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(StorePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(StorePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                //new StorePage().setVisible(true);
//            }
//        });
//    }
    //a method to open up the page
    public void open() {

        //When the form is displayed, start loading the items
        createFilters();
        GeneralSQL.getConnection();
        SQLStore.createCart(Variables.customerID);
        SQLStore.loadGames();

        //After that is done, then create the items that will display the games information
        //Call upon a method we make here
        displayGames("ALL");

        //Change the current page variable
        Methods.currentPage = "Customer";

        gamePanel.setVisible(false);

        //Make sure to show the cart as well
        //SQLStore.createCart(Variables.userID);
        cartAmount.setText("In Cart: " + Lists.cart.size());
        cartButton.setEnabled(true);
        gameDescription.setLineWrap(true);
        gameDescription.setVisible(false);
        gameDescription.setLineWrap(true);
        gameDescription.setVisible(false);
        buyButton.setEnabled(true);
        amountBuying.setEnabled(true);
        totalLabel.setText("Total: $0.00");

        //control panel
        logOutButton.setText("Log Out");

        filtersPanel.setVisible(false);

        controlsLabel.setVisible(false);
        controls1.setVisible(false);
        controls2.setVisible(false);
        controls3.setVisible(false);

        searchBar.setText("");

        this.setVisible(true);

    }

    public void openGuest() {

        //When the form is displayed, start loading the items
        createFilters();
        SQLStore.loadGames();

        //After that is done, then create the items that will display the games information
        //Call upon a method we make here
        displayGames("ALL");

        //Change the current page variable
        Methods.currentPage = "Customer";

        gamePanel.setVisible(false);

        //Make sure to show the cart as well
        //SQLStore.createCart(Variables.userID);
        cartAmount.setText("Cart innaccesible to guests");
        cartButton.setEnabled(false);

        //the game panel
        gameDescription.setLineWrap(true);
        gameDescription.setVisible(false);
        buyButton.setEnabled(false);
        amountBuying.setEnabled(false);
        totalLabel.setText("Please login to purchase items");

        //control panel
        logOutButton.setText("Log In");

        filtersPanel.setVisible(false);

        controlsLabel.setVisible(false);
        controls1.setVisible(false);
        controls2.setVisible(false);
        controls3.setVisible(false);

        this.setVisible(true);
        
        long endTime = System.nanoTime();

    }

    public void openPOS(ManagerView manager) {

        //When the form is displayed, start loading the items
        createFilters();
        GeneralSQL.getConnection();
        SQLStore.createCart(Variables.customerID);
        SQLStore.loadGames();

        //After that is done, then create the items that will display the games information
        //Call upon a method we make here
        displayGames("ALL");

        //Change the current page variable
        Methods.currentPage = "Customer";

        gamePanel.setVisible(false);

        //Make sure to show the cart as well
        //SQLStore.createCart(Variables.userID);
        cartAmount.setText("In Cart: " + Lists.cart.size());
        cartButton.setEnabled(true);
        gameDescription.setLineWrap(true);
        gameDescription.setVisible(false);
        gameDescription.setLineWrap(true);
        gameDescription.setVisible(false);
        buyButton.setEnabled(true);
        amountBuying.setEnabled(true);
        totalLabel.setText("Total: $0.00");

        //control panel
        logOutButton.setText("Return");

        filtersPanel.setVisible(false);

        controlsLabel.setVisible(false);
        controls1.setVisible(false);
        controls2.setVisible(false);
        controls3.setVisible(false);

        searchBar.setText("");

        //also make sure the manager object is set here
        //this is so we can go back to the manager page with no issue
        this.manager = manager;

        this.setVisible(true);

    }
    
    //a way to return from cart as a manager and still have log out be return
    //if needs be it can be used for toher things to we need to have when returning as a manager
    public void managerReturn(){
    
        logOutButton.setText("Return");
        
    }

    public void displayGames(String search) {
        Thread gameDisplaying = new Thread(() -> {
            gamesDisplayed.clear();
            selectedGame = 0;

            //It is very simple what we will do here
            //create these panels as sort of like items on as tore page for each game in the lsit
            //We need to clear the original panel first so we can run this different times
            itemContainer.removeAll();

            //also set it back to the default size
            //itemContainer.setPreferredSize(PREVIOUS_SIZE);
            //We will need to create variables in order to seperate the items
            int addX = 0;
            int addY = 0;

            //also reset the size of the container
            itemContainer.setPreferredSize(originalSize);

            //Now check the search
            if (search.equals("ALL")) {

                int gamesShown = 0;

                for (int x = 0; x < Lists.games.size(); x++) {

                    //First create a new game display object
                    //Before we do we need to check if the filters are satisfied
                    //We need to do another for loop
                    //we will make variables that need to be checked to proceed with creating the object
                    boolean consoleSearchable = false;
                    boolean genreSearchable = false;

                    for (int y = 0; y < consoleFiltersList.size(); y++) {

                        if (consoleFiltersList.get(y).getText().equals(Lists.games.get(x).system)) {

                            //Now check if its being searched for or not
                            if (consoleFiltersList.get(y).isSelected()) {

                                consoleSearchable = true;
                                y = consoleFiltersList.size();

                            } else {

                                consoleSearchable = false;
                                y = consoleFiltersList.size();

                            }

                        }

                    }

                    for (int z = 0; z < genreFiltersList.size(); z++) {

                        if (genreFiltersList.get(z).getText().equals(Lists.games.get(x).genre)) {

                            //Now check if its being searched for or not
                            if (genreFiltersList.get(z).isSelected()) {

                                genreSearchable = true;
                                z = consoleFiltersList.size();

                            } else {

                                consoleSearchable = false;
                                z = consoleFiltersList.size();

                            }

                        }

                    }

                    if (consoleSearchable && genreSearchable && Lists.games.get(x).active == 1) {
                        GameDisplay gameItem = new GameDisplay();
                        System.out.println(x);

                        gameItem.gameTitle.setText(Lists.games.get(x).name);
                        gameItem.gamePrice.setText("$" + String.format("%.2f", Lists.games.get(x).price));
                        gameItem.systemLabel.setText(Lists.games.get(x).system);
                        gameItem.quantityLabel.setText(Lists.games.get(x).quantity + " Left");
                        gameItem.genreLabel.setText(Lists.games.get(x).genre);

                        //System.out.println(System.getProperty("user.dir") + "\\ThumbnailPlaceholder.png");
                        //ImageIcon icon = new ImageIcon(System.getProperty("user.dir") + "\\src\\ThumbnailPlaceholder.png");
                        //gameItem.image.setIcon(icon);
                        //We should also edit the image
                        for (Object[] desiredImage : Lists.images) {

                            //check if we get an image
                            if ((int) desiredImage[0] == Lists.games.get(x).gameID && (int) desiredImage[1] == 0) {

                                byte[] imgBlob = (byte[]) desiredImage[2];
                                //byte[] b = imgBlob.getBytes(1, (int) imgBlob.length());

                                ImageIcon newImage = new ImageIcon(imgBlob);
                                //byte[] b = imgBlob.getBytes(1, (int) imgBlob.length());
                                Image tempImage = newImage.getImage();
                                gameItem.image.setIcon(new ImageIcon(tempImage.getScaledInstance(226, 126, 0)));

                            }

                        }

                        //Make sure you give the index as well
                        //This is so we can use it to display things in the context panel
                        gameItem.indexHeld = x;

                        //a little print statement for testing
                        System.out.println(gameItem.gameTitle.getText());

                        //Check if were on an even number
                        //Any factor of two will be start of the next row
                        if (gamesShown % 3 == 0) {

                            //Set the x back to default
                            addX = 10;

                            //now chaqnge the y value
                            addY += 370;

                            Dimension newSize = new Dimension(itemContainer.getWidth(), itemContainer.getPreferredSize().height + 370);

                            itemContainer.setPreferredSize(newSize);
                            itemContainer.repaint();
                            itemDisplay.repaint();
                            System.out.println(x + "2");

                        }

//                if (x % 4 == 0) {
//
//                    
//                    Dimension newSize = new Dimension(itemContainer.getWidth(), itemContainer.getPreferredSize().height + 370);
//
//                    itemContainer.setPreferredSize(newSize);
//                    itemContainer.repaint();
//                    itemDisplay.repaint();
//
//                }
                        //Now edit the display when we put the 4th item on
                        //this is so we dont overshow the display
                        gameItem.setBounds(itemContainer.getX() + addX, 0 - 380 + addY, 226, 350);

                        System.out.println(Lists.games.get(x).name);

                        addX += 250;

                        //And now add the game display item to the item container
                        itemContainer.add(gameItem);

                        gameItem.setVisible(true);

                        itemContainer.repaint();
                        itemDisplay.repaint();
                        itemDisplay.revalidate();

                        gamesShown++;

                        gamesDisplayed.add(gameItem);

                    }
                }
            } else {

                //since were working for a search we need to use a counter variable to count how many games we put up
                int gamesShown = 0;

                //lets create a pattern object
                Pattern gamePattern = Pattern.compile(search + "+");

                //Now repeat the same thing but this time use the funtion and/or filters
                for (int x = 0; x < Lists.games.size(); x++) {

                    //one thing we will do differently is check if the criteria is met
                    //Make a matcher object
                    Matcher gameMatch = gamePattern.matcher(Lists.games.get(x).name.toLowerCase());

                    if (gameMatch.find()) {

                        boolean consoleSearchable = false;
                        boolean genreSearchable = false;

                        for (int y = 0; y < consoleFiltersList.size(); y++) {

                            if (consoleFiltersList.get(y).getText().equals(Lists.games.get(x).system)) {

                                //Now check if its being searched for or not
                                if (consoleFiltersList.get(y).isSelected()) {

                                    consoleSearchable = true;
                                    y = consoleFiltersList.size();

                                } else {

                                    consoleSearchable = false;
                                    y = consoleFiltersList.size();

                                }

                            }

                        }

                        for (int z = 0; z < genreFiltersList.size(); z++) {

                            if (genreFiltersList.get(z).getText().equals(Lists.games.get(x).genre)) {

                                //Now check if its being searched for or not
                                if (genreFiltersList.get(z).isSelected()) {

                                    genreSearchable = true;
                                    z = consoleFiltersList.size();

                                } else {

                                    consoleSearchable = false;
                                    z = consoleFiltersList.size();

                                }

                            }

                        }

                        if (consoleSearchable && genreSearchable && Lists.games.get(x).active == 1) {

                            GameDisplay gameItem = new GameDisplay();

                            gameItem.gameTitle.setText(Lists.games.get(x).name);
                            gameItem.gamePrice.setText("$" + String.format("%.2f", Lists.games.get(x).price));
                            gameItem.systemLabel.setText(Lists.games.get(x).system);
                            gameItem.quantityLabel.setText(Lists.games.get(x).quantity + " Left");
                            gameItem.genreLabel.setText(Lists.games.get(x).genre);

                            //ImageIcon icon = new ImageIcon(System.getProperty("user.dir") + "\\src\\ThumbnailPlaceholder.png");
                            //gameItem.image.setIcon(icon);
                            //Make sure you give the index as well
                            //This is so we can use it to display things in the context panel
                            for (Object[] desiredImage : Lists.images) {

                                //check if we get an image
                                if ((int) desiredImage[0] == Lists.games.get(x).gameID && (int) desiredImage[1] == 0) {

                                    byte[] imgBlob = (byte[]) desiredImage[2];
                                    //byte[] b = imgBlob.getBytes(1, (int) imgBlob.length());

                                    ImageIcon newImage = new ImageIcon(imgBlob);
                                    Image tempImage = newImage.getImage();
                                    gameItem.image.setIcon(new ImageIcon(tempImage.getScaledInstance(226, 126, 0)));

                                }

                            }

                            gameItem.indexHeld = x;

                            //a little print statement for testing
                            System.out.println(gameItem.gameTitle.getText());

                            //Check if were on an even number
                            //Any factor of two will be start of the next row
                            if (gamesShown % 3 == 0) {

                                //Set the x back to default
                                addX = 10;

                                //now chaqnge the y value
                                addY += 370;

                                //Make the item container bigger in height to fit more items
                                //First make a new dimension to store it
                                Dimension newSize = new Dimension(itemContainer.getWidth(), itemContainer.getHeight() + addY);

                                itemContainer.setPreferredSize(newSize);
                                itemContainer.repaint();
                                itemDisplay.repaint();
                                System.out.println("Is running");

                            }

                            gameItem.setBounds(itemContainer.getX() + addX, 0 - 380 + addY, 226, 350);

                            addX += 250;

                            //And now add the game display item to the item container
                            itemContainer.add(gameItem);

                            gameItem.setVisible(true);

                            itemContainer.repaint();
                            itemDisplay.repaint();
                            itemDisplay.revalidate();

                            gamesShown += 1;

                            gamesDisplayed.add(gameItem);
                        }
                    }

                }
            }

            //Now we will reset the search panel
            itemDisplay.revalidate();

            gamePanel.setVisible(false);
        });

        gameDisplaying.start();

    }

    public static void displayGame(int x) {

        //Make the item display show
        if (x != -1) {

            gamePanel.setVisible(true);

            //set the index to
            index = x;

            gameTitle.setText(Lists.games.get(index).name);
            gameSystem.setText(Lists.games.get(index).system);
            gameGenre.setText(Lists.games.get(index).genre);
            quanity.setText(Lists.games.get(index).quantity + " Left");
            price.setText("$" + String.format("%.2f", Lists.games.get(index).price));
            gameDescription.setText(Lists.games.get(index).description);
            amountBuying.setValue(0);

            gameDescription.setVisible(true);

            //ImageIcon icon = new ImageIcon(System.getProperty("user.dir") + "\\src\\MainImagePlaceholder.png");
            //image.setText("");
            //image.setIcon(icon);
            boolean hasImage = false;

            for (Object[] desiredImage : Lists.images) {

                //check if we get an image
                if ((int) desiredImage[0] == Lists.games.get(x).gameID && (int) desiredImage[1] == 1) {

                    byte[] imgBlob = (byte[]) desiredImage[2];
                    //byte[] b = imgBlob.getBytes(1, (int) imgBlob.length());

                    ImageIcon newImage = new ImageIcon(imgBlob);
                    Image tempImage = newImage.getImage();
                    image.setIcon(new ImageIcon(tempImage.getScaledInstance(256, 126, 0)));
                    hasImage = true;

                }

            }

            if (!hasImage) {

                //set the default image
                image.setIcon((Icon) Lists.images.get(0)[2]);
            }

            warning1.setVisible(false);
            warning2.setVisible(false);
            soldOut.setVisible(false);

        }

    }

    //we need to create filters with this method
    public void createFilters() {

        Dimension filterPanelPreffered = new Dimension(191, Lists.consoles.size() * 30);

        consoleFiltersPanel.setPreferredSize(filterPanelPreffered);

        for (int x = 0; x < Lists.consoles.size(); x++) {

            JCheckBox newFilter = new JCheckBox(Lists.consoles.get(x));
            newFilter.setBounds(50, x * 30, 100, 20);
            consoleFiltersPanel.add(newFilter);

            newFilter.setSelected(true);

            //and now add the new filter to the console
            consoleFiltersList.add(newFilter);

            newFilter.addItemListener(new java.awt.event.ItemListener() {
                public void itemStateChanged(java.awt.event.ItemEvent evt) {
                    filterChanged(evt);
                }
            });

        }

        filterPanelPreffered = new Dimension(191, Lists.genres.size() * 30);
        genreFiltersPanel.setPreferredSize(filterPanelPreffered);

        for (int x = 0; x < Lists.genres.size(); x++) {

            JCheckBox newFilter = new JCheckBox(Lists.genres.get(x));
            newFilter.setBounds(50, x * 30, 100, 20);
            genreFiltersPanel.add(newFilter);

            newFilter.setSelected(true);

            genreFiltersList.add(newFilter);

            newFilter.addItemListener(new java.awt.event.ItemListener() {
                public void itemStateChanged(java.awt.event.ItemEvent evt) {
                    filterChanged(evt);
                }
            });

        }

    }

    //everytime a filter is changed run this method
    public void filterChanged(ItemEvent e) {

        searchGames();

    }

    public void searchGames() {

        if (searchBar.getText().isBlank()) {

            displayGames("ALL");

        } else {

            displayGames(searchBar.getText().toLowerCase());

        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JSpinner amountBuying;
    private javax.swing.JLabel amountBuyingLabel;
    private javax.swing.JButton buyButton;
    private javax.swing.JLabel cartAmount;
    private javax.swing.JButton cartButton;
    private javax.swing.JButton consoleAll;
    private javax.swing.JScrollPane consoleFilters;
    private javax.swing.JPanel consoleFiltersPanel;
    private javax.swing.JLabel consoleLabel;
    private javax.swing.JPanel contextPanel;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JLabel controls1;
    private javax.swing.JLabel controls2;
    private javax.swing.JLabel controls3;
    private javax.swing.JLabel controlsLabel;
    private javax.swing.JLabel filterInstructions;
    private javax.swing.JToggleButton filtersButton;
    private javax.swing.JPanel filtersPanel;
    private static javax.swing.JTextArea gameDescription;
    private static javax.swing.JLabel gameGenre;
    private static javax.swing.JPanel gamePanel;
    private static javax.swing.JLabel gameSystem;
    private static javax.swing.JTextArea gameTitle;
    private javax.swing.JButton genreAll;
    private javax.swing.JScrollPane genreFilters;
    private javax.swing.JPanel genreFiltersPanel;
    private javax.swing.JLabel genreLabel;
    private javax.swing.JButton helpButton;
    private static javax.swing.JLabel image;
    private javax.swing.JLayeredPane infoContainer;
    private javax.swing.JPanel itemContainer;
    private javax.swing.JScrollPane itemDisplay;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logOutButton;
    private javax.swing.JLayeredPane panelContainers;
    private static javax.swing.JLabel price;
    private static javax.swing.JLabel quanity;
    private javax.swing.JButton quitButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton returnButton;
    private javax.swing.JTextField searchBar;
    private javax.swing.JButton searchButton;
    private javax.swing.JPanel searchPanel;
    private static javax.swing.JLabel soldOut;
    private javax.swing.JLabel totalLabel;
    private static javax.swing.JLabel warning1;
    private static javax.swing.JLabel warning2;
    // End of variables declaration//GEN-END:variables
}
