/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Customer;

import Global.CartItem;
import Login.LogonPage;
import Global.Lists;
import Global.Methods;
import Global.Variables;
import SQL.SQLStore;
import java.awt.Desktop;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.text.ParseException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

//import Global.CartItem;
/**
 *
 * @author karso
 */
public class CartPage extends javax.swing.JFrame {

    /**
     * Creates new form CartPage
     */
    StorePage store = null;
    LogonPage login = null;

    //this will be arraylist to hold errors
    ArrayList<String> cardNumErrors = new ArrayList<String>();
    ArrayList<String> expirationErrors = new ArrayList<String>();
    ArrayList<String> cvvErrors = new ArrayList<String>();
    ArrayList<String> discountErrors = new ArrayList<String>();

    ArrayList<JLabel> errorMessages = new ArrayList<JLabel>();

    public CartPage(StorePage store, LogonPage login) {
        initComponents();

        this.store = store;
        this.login = login;

        errorMessages.add(cardNumError);
        errorMessages.add(dateError);
        errorMessages.add(cvvError);
    }

    //have a float variable so we can hold and add the total of the cart
    float cartTotal = 0.00f;

    //a variable to hold the discount amount
    float discountAmount = 0.00f;

    //varaibles to hold final totals
    float tax = 0.00f;
    float subtotal = 0.00f;
    float discounted = 0.00f;
    float totalFinal = 0.00f;

    //also a variable to hold the discount id
    int discountID = 0;

    String discountString = "";

    ArrayList<Object> discountInfo = new ArrayList<Object>();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cartRemoval = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        gamesNotBought = new javax.swing.JTextArea();
        errorLabel = new javax.swing.JLabel();
        disclaimer = new javax.swing.JLabel();
        instructions = new javax.swing.JLabel();
        instructions2 = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();
        controlPanel = new javax.swing.JPanel();
        logOutButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();
        returnButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        cartPanel = new javax.swing.JPanel();
        discountPrice = new javax.swing.JLabel();
        monthBox = new javax.swing.JComboBox<>();
        checkoutInsructions = new javax.swing.JLabel();
        divider1 = new javax.swing.JPanel();
        divider2 = new javax.swing.JPanel();
        yearBox = new javax.swing.JComboBox<>();
        cvvField = new javax.swing.JTextField();
        discountCodelabel = new javax.swing.JLabel();
        purchaseError = new javax.swing.JLabel();
        expirationDateLabel = new javax.swing.JLabel();
        clearButton = new javax.swing.JButton();
        discountError = new javax.swing.JLabel();
        removeButton = new javax.swing.JButton();
        checkoutDisclaimer = new javax.swing.JLabel();
        cartTitle = new javax.swing.JLabel();
        cardNumLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        cartList = new javax.swing.JList<>();
        discountPercent = new javax.swing.JLabel();
        cardNumError = new javax.swing.JLabel();
        cvvError = new javax.swing.JLabel();
        cvvLabel = new javax.swing.JLabel();
        dateError = new javax.swing.JLabel();
        cardNumField = new javax.swing.JTextField();
        checkoutTitle = new javax.swing.JLabel();
        discountCodeField = new javax.swing.JTextField();
        totalLabel = new javax.swing.JLabel();
        cartInstructions = new javax.swing.JLabel();
        discountInstructions = new javax.swing.JLabel();
        discountButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        quantityLabel = new javax.swing.JLabel();
        quantity = new javax.swing.JSpinner();
        checkoutButton = new javax.swing.JButton();
        finalTotal = new javax.swing.JLabel();
        taxAmount = new javax.swing.JLabel();
        subtotalLabel = new javax.swing.JLabel();

        cartRemoval.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        cartRemoval.setTitle("Not Enough Stock");
        cartRemoval.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cartRemovalFocusLost(evt);
            }
        });

        gamesNotBought.setEditable(false);
        gamesNotBought.setColumns(20);
        gamesNotBought.setRows(5);
        jScrollPane2.setViewportView(gamesNotBought);

        errorLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        errorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        errorLabel.setText("The following items do not have enough stock");

        disclaimer.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        disclaimer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        disclaimer.setText("They have been removed from your cart");

        instructions.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        instructions.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        instructions.setText("Please re-evaluate your order before proceeding");

        instructions2.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        instructions2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        instructions2.setText("and checkout again");

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout cartRemovalLayout = new javax.swing.GroupLayout(cartRemoval.getContentPane());
        cartRemoval.getContentPane().setLayout(cartRemovalLayout);
        cartRemovalLayout.setHorizontalGroup(
            cartRemovalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cartRemovalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cartRemovalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cartRemovalLayout.createSequentialGroup()
                        .addComponent(errorLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cartRemovalLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(disclaimer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(instructions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(instructions2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(okButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        cartRemovalLayout.setVerticalGroup(
            cartRemovalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cartRemovalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(disclaimer)
                .addGap(18, 18, 18)
                .addComponent(instructions)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(instructions2)
                .addGap(18, 18, 18)
                .addComponent(okButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/UsedGamesLogo.png")).getImage());

        controlPanel.setBackground(new java.awt.Color(65, 146, 217));
        controlPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        logOutButton.setBackground(new java.awt.Color(0, 48, 90));
        logOutButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        logOutButton.setForeground(new java.awt.Color(255, 255, 255));
        logOutButton.setText("Log Out");
        logOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutButtonActionPerformed(evt);
            }
        });

        quitButton.setBackground(new java.awt.Color(0, 48, 90));
        quitButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        quitButton.setForeground(new java.awt.Color(255, 255, 255));
        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        returnButton.setBackground(new java.awt.Color(0, 48, 90));
        returnButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        returnButton.setForeground(new java.awt.Color(255, 255, 255));
        returnButton.setText("Continue Shopping");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        helpButton.setBackground(new java.awt.Color(0, 48, 90));
        helpButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        helpButton.setForeground(new java.awt.Color(255, 255, 255));
        helpButton.setText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(logOutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(quitButton, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
            .addComponent(returnButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(helpButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelLayout.createSequentialGroup()
                .addComponent(returnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(helpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(quitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        cartPanel.setBackground(new java.awt.Color(65, 146, 217));

        discountPrice.setText("jLabel1");

        monthBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Month", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        monthBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                monthBoxItemStateChanged(evt);
            }
        });

        checkoutInsructions.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        checkoutInsructions.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        checkoutInsructions.setText("Checkout Here");

        divider1.setBackground(java.awt.Color.black);

        javax.swing.GroupLayout divider1Layout = new javax.swing.GroupLayout(divider1);
        divider1.setLayout(divider1Layout);
        divider1Layout.setHorizontalGroup(
            divider1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        divider1Layout.setVerticalGroup(
            divider1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 9, Short.MAX_VALUE)
        );

        divider2.setBackground(java.awt.Color.black);

        javax.swing.GroupLayout divider2Layout = new javax.swing.GroupLayout(divider2);
        divider2.setLayout(divider2Layout);
        divider2Layout.setHorizontalGroup(
            divider2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        divider2Layout.setVerticalGroup(
            divider2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 9, Short.MAX_VALUE)
        );

        yearBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        yearBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                yearBoxItemStateChanged(evt);
            }
        });

        cvvField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cvvFieldKeyReleased(evt);
            }
        });

        discountCodelabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        discountCodelabel.setText("Discount Code");

        purchaseError.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        purchaseError.setForeground(java.awt.Color.red);
        purchaseError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        purchaseError.setText("Error in purchase, Please try again");

        expirationDateLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        expirationDateLabel.setText("Expiration Date *");

        clearButton.setBackground(new java.awt.Color(0, 48, 90));
        clearButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        clearButton.setForeground(new java.awt.Color(255, 255, 255));
        clearButton.setText("Clear Cart");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        discountError.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        discountError.setForeground(java.awt.Color.red);
        discountError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        discountError.setText("Not a valid discount/promotional code");

        removeButton.setBackground(new java.awt.Color(0, 48, 90));
        removeButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        removeButton.setForeground(new java.awt.Color(255, 255, 255));
        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        checkoutDisclaimer.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        checkoutDisclaimer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        checkoutDisclaimer.setText("* means required");

        cartTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        cartTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cartTitle.setText("CART");

        cardNumLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cardNumLabel.setText("Card Number *");

        cartList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        cartList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                cartListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(cartList);

        discountPercent.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        discountPercent.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        discountPercent.setText("Discount Amount: 0%");

        cardNumError.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        cardNumError.setForeground(java.awt.Color.red);
        cardNumError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cardNumError.setText("jLabel1");

        cvvError.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        cvvError.setForeground(java.awt.Color.red);
        cvvError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cvvError.setText("jLabel1");

        cvvLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cvvLabel.setText("CVV *");

        dateError.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        dateError.setForeground(java.awt.Color.red);
        dateError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dateError.setText("jLabel1");

        cardNumField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cardNumFieldKeyReleased(evt);
            }
        });

        checkoutTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        checkoutTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        checkoutTitle.setText("CHECKOUT");

        discountCodeField.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        totalLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        totalLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        totalLabel.setText("Cart Total: $0.00");
        totalLabel.setPreferredSize(new java.awt.Dimension(258, 25));

        cartInstructions.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        cartInstructions.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cartInstructions.setText("View and edit cart here");

        discountInstructions.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        discountInstructions.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        discountInstructions.setText("Add and check discount code here for money off");

        discountButton.setBackground(new java.awt.Color(0, 48, 90));
        discountButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        discountButton.setForeground(new java.awt.Color(255, 255, 255));
        discountButton.setText("Check Discount Code");
        discountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discountButtonActionPerformed(evt);
            }
        });

        updateButton.setBackground(new java.awt.Color(0, 48, 90));
        updateButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        updateButton.setForeground(new java.awt.Color(255, 255, 255));
        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        quantityLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        quantityLabel.setText("Quantity:");

        quantity.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                quantityStateChanged(evt);
            }
        });

        checkoutButton.setBackground(new java.awt.Color(0, 48, 90));
        checkoutButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        checkoutButton.setForeground(new java.awt.Color(255, 255, 255));
        checkoutButton.setText("Checkout");
        checkoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutButtonActionPerformed(evt);
            }
        });

        finalTotal.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        finalTotal.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        finalTotal.setText("Final Total: $0.00");
        finalTotal.setPreferredSize(new java.awt.Dimension(258, 25));

        taxAmount.setText("jLabel1");

        subtotalLabel.setText("jLabel1");

        javax.swing.GroupLayout cartPanelLayout = new javax.swing.GroupLayout(cartPanel);
        cartPanel.setLayout(cartPanelLayout);
        cartPanelLayout.setHorizontalGroup(
            cartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cartPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(cartPanelLayout.createSequentialGroup()
                        .addGroup(cartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addComponent(cartTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(totalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cartInstructions, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(cartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(removeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(quantity)
                            .addComponent(quantityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(updateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(cartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(discountPrice, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(divider1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cvvError, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(discountCodeField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cardNumField)
                            .addComponent(cardNumLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(cartPanelLayout.createSequentialGroup()
                                .addGroup(cartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(expirationDateLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(cartPanelLayout.createSequentialGroup()
                                        .addComponent(monthBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(yearBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(cartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cvvField)
                                    .addComponent(cvvLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(discountCodelabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(discountPercent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cardNumError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dateError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(discountError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(divider2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(subtotalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(taxAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(finalTotal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                            .addComponent(checkoutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(discountButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(discountInstructions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(checkoutInsructions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(checkoutTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(cartPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(purchaseError, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(checkoutDisclaimer, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(113, 113, 113)))
                .addContainerGap())
        );
        cartPanelLayout.setVerticalGroup(
            cartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cartPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cartTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkoutTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(cartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cartInstructions)
                    .addComponent(checkoutInsructions))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(cartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkoutDisclaimer)
                    .addComponent(purchaseError))
                .addGap(5, 5, 5)
                .addGroup(cartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cartPanelLayout.createSequentialGroup()
                        .addComponent(cardNumLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cardNumField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cardNumError)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(cartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(expirationDateLabel)
                            .addComponent(cvvLabel))
                        .addGap(4, 4, 4)
                        .addGroup(cartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(monthBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(yearBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cvvField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateError)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cvvError)
                        .addGap(7, 7, 7)
                        .addComponent(discountInstructions)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(discountCodelabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(discountCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(discountButton)
                        .addGap(4, 4, 4)
                        .addComponent(discountPercent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(discountError)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(divider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(discountPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(subtotalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(taxAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(divider2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(finalTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkoutButton, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE))
                    .addGroup(cartPanelLayout.createSequentialGroup()
                        .addGroup(cartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(cartPanelLayout.createSequentialGroup()
                                .addComponent(removeButton)
                                .addGap(18, 18, 18)
                                .addComponent(quantityLabel)
                                .addGap(2, 2, 2)
                                .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(clearButton)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cartPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(controlPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cartPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void logOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutButtonActionPerformed
        //Go back to login screen
        this.dispose();
        if (Variables.currentLevel.equals("Customer")) {

            login.run();

        } else {

            try {
                store.manager.open();
            } catch (ParseException ex) {
                Logger.getLogger(CartPage.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_logOutButtonActionPerformed

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        //Quit the program
        System.exit(0);
    }//GEN-LAST:event_quitButtonActionPerformed

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        this.dispose();
        store.open();
    }//GEN-LAST:event_returnButtonActionPerformed

    private void cartListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_cartListValueChanged
        System.out.println(cartList.getSelectedIndex());

        //change the quantity in the box
        //so if the user wants to update it they can
        if (cartList.getSelectedIndex() != -1) {

            quantity.setValue(Lists.cart.get(cartList.getSelectedIndex()).quantity);

        } else {

            quantity.setValue(0);

        }
    }//GEN-LAST:event_cartListValueChanged

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed

        //We are goin to take the selected index and act accordingly
        Lists.cart.get(cartList.getSelectedIndex()).remove(cartList.getSelectedIndex());

        resetCart();
    }//GEN-LAST:event_removeButtonActionPerformed

    private void monthBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_monthBoxItemStateChanged
        checkExpire();
    }//GEN-LAST:event_monthBoxItemStateChanged

    private void yearBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_yearBoxItemStateChanged
        checkExpire();
    }//GEN-LAST:event_yearBoxItemStateChanged

    private void cvvFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cvvFieldKeyReleased
        cvvErrors = Methods.checkCVV(cvvField.getText());

        //and now display the errors
        Methods.checkForErrors(cvvErrors, cvvError);
    }//GEN-LAST:event_cvvFieldKeyReleased

    private void cardNumFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cardNumFieldKeyReleased
        cardNumErrors = Methods.checkCardNum(cardNumField.getText());

        //and now display the errors
        Methods.checkForErrors(cardNumErrors, cardNumError);
    }//GEN-LAST:event_cardNumFieldKeyReleased

    private void checkoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutButtonActionPerformed

        //only run if the cart has an item in it
        if (!Lists.cart.isEmpty()) {
            //we need to check if everything is valid
            cardNumErrors = Methods.checkCardNum(cardNumField.getText());

            //and now display the errors
            Methods.checkForErrors(cardNumErrors, cardNumError);

            cvvErrors = Methods.checkCVV(cvvField.getText());

            //and now display the errors
            Methods.checkForErrors(cvvErrors, cvvError);

            checkExpire();

            boolean hasErrors = false;

            //now test is they any errors are visible
            for (JLabel message : errorMessages) {

                if (message.isVisible()) {

                    hasErrors = true;
                    break;

                }

            }

            if (hasErrors == false) {

                //Here we will check if the items can be bought
                //we are going to want to do a number of things if it is able to be bought
                //what we need to do first is call upon a method in the SQLStore class
                //this method will check if all items are able to be bought at its current state
                //This is an online storefront and the customers need to know if we could not meet their order
                ArrayList<String> cantBuy = SQLStore.checkCart();
                purchaseError.setVisible(false);

                if (cantBuy.size() == 0) {

                    //Now we can process the order
                    String expDate = (String) monthBox.getSelectedItem() + "/" + (String) yearBox.getSelectedItem();

                    //System.out.println((String) monthBox.getSelectedItem() + "/" + (String) yearBox.getSelectedItem());
                    SQLStore.purchase(cardNumField.getText(), expDate, cvvField.getText(), discountID, discounted, tax, totalFinal, subtotal, discountString);

                    //then reset the cart
                    resetCart();

                    //now reset the whole cart screen
                    setCardExpire();
                    //we only need to set the year

                    cardNumField.setText("");
                    monthBox.setSelectedIndex(0);
                    yearBox.setSelectedIndex(0);
                    cvvField.setText("");

                    //make the errors invisible
                    cardNumError.setVisible(false);
                    dateError.setVisible(false);
                    cvvError.setVisible(false);

                    discountError.setVisible(false);
                    discountCodeField.setText("");

                    discountInfo.clear();

                    this.setVisible(true);

                    purchaseError.setVisible(false);

                } else if (cantBuy.get(0).equals("ERROR")) {

                    //display an error message
                    purchaseError.setVisible(true);

                } else {

                    //there was no error but there was games that di not meet the stock
                    //I feel the best way to show this is with a popup
                    //this is so we can get the users attention and advised them to check their cart again
                    //make sure to cleare previous entry
                    gamesNotBought.setText("");

                    for (String item : cantBuy) {

                        //add the game to the text box
                        gamesNotBought.setText(gamesNotBought.getText() + item + "\n");
                        cartRemoval.setSize(400, 500);
                        cartRemoval.setVisible(true);

                    }

                    resetCart();

                }

            }
        }
    }//GEN-LAST:event_checkoutButtonActionPerformed

    private void quantityStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_quantityStateChanged

        //We need to make sure it doesnt go above or below what it needs to
        int tempAmount = (int) quantity.getValue();

        //First lets check if it becomes negative
        if (tempAmount < 0 || cartList.getSelectedIndex() == -1) {

            quantity.setValue(0);
            //Just set it back to 0

        }

        //and now check if the amount is more than the amount we have
        if (cartList.getSelectedIndex() != -1 && tempAmount > Lists.cart.get(cartList.getSelectedIndex()).maxQuantity) {

            quantity.setValue(Lists.cart.get(cartList.getSelectedIndex()).maxQuantity);
            //set it to the max quantity we have

        }


    }//GEN-LAST:event_quantityStateChanged

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed

        //first check if an object is selected from the list
        if (cartList.getSelectedIndex() != -1) {

            //now we can run it
            //We need another if
            //If a user makes the amount 0 go and remove it for them
            if ((int) quantity.getValue() == 0) {

                Lists.cart.get(cartList.getSelectedIndex()).remove(cartList.getSelectedIndex());

                resetCart();

            } else {

                //now we just update the quantity
                Lists.cart.get(cartList.getSelectedIndex()).updateQuantity((int) quantity.getValue());

                resetCart();

            }

        }

    }//GEN-LAST:event_updateButtonActionPerformed

    private void discountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discountButtonActionPerformed
        // TODO add your handling code here:
        discountInfo.clear();

        if (!discountCodeField.getText().isEmpty()) {

            if (Variables.currentLevel.equals("Customer")) {
                try {
                    discountInfo = SQLStore.searchForCoupon(discountCodeField.getText(), Variables.userID);
                } catch (ParseException ex) {
                    Logger.getLogger(CartPage.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                try {
                    discountInfo = SQLStore.searchForCoupon(discountCodeField.getText(), Variables.customerID);
                } catch (ParseException ex) {
                    Logger.getLogger(CartPage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            checkDiscount();
        } else {

            discountPercent.setText("Discount Amount: 0%");
            discountAmount = 0.00f;
            discounted = 0.00f;
            discountID = 0;
            discountString = "0%";

        }

        resetCart();

    }//GEN-LAST:event_discountButtonActionPerformed

    private void cartRemovalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cartRemovalFocusLost
        cartRemoval.dispose();
    }//GEN-LAST:event_cartRemovalFocusLost

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        cartRemoval.dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        Lists.cart.clear();
        resetCart();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        //Open up a pdf for a help file
        try {
            //Open up a pdf for a help file
            URL helpURL = new URL("https://drive.google.com/file/d/1ALrUO5yQLh9XgUSC4xi0H_CL_QuMeZ6g/view?usp=sharing");
            try {
                Desktop.getDesktop().browse(helpURL.toURI());
            } catch (URISyntaxException ex) {
                Logger.getLogger(StorePage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(StorePage.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (MalformedURLException ex) {
            Logger.getLogger(StorePage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_helpButtonActionPerformed

    /**
     * //@param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(CartPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(CartPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(CartPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(CartPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                //new CartPage().setVisible(true);
//            }
//        });
//    }
    //a method to open up this page
    public void open() {
        //We want to make the checkout section be updated the moment its opened
        //for credit card lets put it in a method incase we may need to use it again
        setCardExpire();
        //we only need to set the year

        cardNumField.setText("");
        monthBox.setSelectedIndex(0);
        yearBox.setSelectedIndex(0);
        cvvField.setText("");

        //make the errors invisible
        cardNumError.setVisible(false);
        dateError.setVisible(false);
        cvvError.setVisible(false);

        discountError.setVisible(false);
        discountCodeField.setText("");
        discountID = 0;

        discountInfo.clear();

        checkDiscount();
        //this is so nothing is priced improperly when reloading since eeveryhthing but the cart is erased
        //we dont want explotiable discounts

        resetCart();

        if (Variables.currentLevel.equals("Customer")) {

            logOutButton.setText("Log Out");

        } else {

            logOutButton.setText("Return");

        }

        this.setVisible(true);

        purchaseError.setVisible(false);

    }

    //a method to reset the cart
    public void resetCart() {

        DefaultListModel itemList = new DefaultListModel();

        //have a float variable so we can hold and add the total of the cart
        cartTotal = 0.00f;

        //first we need to set the list
        for (int x = 0; x < Lists.cart.size(); x++) {

            String name = Lists.cart.get(x).getProduct();

            String item = "";

            if (!Lists.cart.get(x).discountActive) {
                item = name + " (" + Lists.cart.get(x).system + ")    x     " + Lists.cart.get(x).quantity + ":          $" + String.format("%.2f", Lists.cart.get(x).total);
            } else {
                item = name + " (" + Lists.cart.get(x).system + ")    x     " + Lists.cart.get(x).quantity + ":          $" + String.format("%.2f", Lists.cart.get(x).discountedTotal);
            }
            //make a label for the item now
            itemList.addElement(item);
//            JLabel itemLabel = new JLabel(item);
//            itemLabel.setSize(itemLabel.getPreferredSize().width, itemLabel.getPreferredSize().height);
//            itemLabel.setVisible(true);
//            cartList.add(itemLabel);

            if (!Lists.cart.get(x).discountActive) {
                cartTotal += Lists.cart.get(x).total;
            } else {

                cartTotal += Lists.cart.get(x).discountedTotal;

            }

        }

        cartList.setModel(itemList);

        totalLabel.setText("Cart Total: $" + String.format("%.2f", cartTotal));

        //now we set more of the of the labels but this time for the checkout
        //set some variables first to make it easier to keep track of and incase we need to save them
        //discounted = cartTotal * discountAmount;
        checkDiscount();

        subtotal = cartTotal - discounted;

        if (subtotal <= 0.00f) {

            subtotal = 0.00f;

        }

        tax = subtotal * .0825f;

        totalFinal = subtotal + tax;

        discountPrice.setText("Discounted: $" + String.format("%.2f", discounted));
        subtotalLabel.setText("Subtotal: $" + String.format("%.2f", subtotal));

        taxAmount.setText("Tax: $" + String.format("%.2f", tax));

        finalTotal.setText("Final Total: $" + String.format("%.2f", totalFinal));

        this.setSize(this.getPreferredSize().width, this.getHeight());

    }

    public void setCardExpire() {

        //We want to get the current year and have it go up to only five years
        //first we need to clear the year box
        yearBox.removeAllItems();

        //and add a placeholder item
        yearBox.addItem("Year");

        //let us set a format that will be assosicated with the card
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yy");

        //now make a variable to get the current year
        LocalDateTime now = LocalDateTime.now();

        //now do a for loop that will be used to keep going as long as its desired
        for (int x = 0; x < 5; x++) {

            //now format it and add it
            //Make sure to add the x as well
            yearBox.addItem(dtf.format(now.plusYears(x)));

        }

    }

    //we will need to check the date and time of what the user has chosen so we will make a method here
    public void checkExpire() {

        //first clear the list beforehand
        expirationErrors.clear();

        if (monthBox.getSelectedIndex() != 0 && yearBox.getSelectedIndex() != 0) {

            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MM/yy");
            LocalDateTime now = LocalDateTime.now();

            LocalDateTime chosenDate = LocalDateTime.of(now.plusYears(yearBox.getSelectedIndex() - 1).getYear(), monthBox.getSelectedIndex(), 1, 0, 0);

            if (dtf.format(chosenDate).equals(dtf.format(now))) {

                //if the month and year are the same keep going as usual
                System.out.println("Date valid");

            } else if (now.isAfter(chosenDate)) {

                //this could trigger even when in the same month and year
                //so thats why we need this to be the else if so it only triggers if its before
                expirationErrors.add("Card is Expired");

            } else {

                //since now was not after the chosen date nor is it in the smae month and year we have a valid date
                System.out.println("Date valid");
            }
        } else if (monthBox.getSelectedIndex() == 0 && yearBox.getSelectedIndex() == 0) {

            expirationErrors.add("Expiration date is required");

        } else {

            expirationErrors.add("Input a valid date");

        }

        //now check for errors
        Methods.checkForErrors(expirationErrors, dateError);

    }

    //a method to check discount
    public void checkDiscount() {

        if (!discountInfo.isEmpty()) {
            
            for (CartItem item : Lists.cart) {

                item.removeDiscount();

            }
            
            if (discountInfo.get(0).equals("Accepted")) {

                //new discount maybe being used
                //set all cart items to not use the discount
                //it will reset anyway or change dpending on the discount added
                for (CartItem item : Lists.cart) {

                    item.removeDiscount();

                }

                //now do what we need to do in order to apply the discount
                if ((int) discountInfo.get(4) == 0) {

                    if ((int) discountInfo.get(1) == 0) {

                        //its a percent
                        discountPercent.setText("Discount Amount: " + String.format("%.0f", (float) discountInfo.get(2) * 100) + "%");
                        discountAmount = (float) discountInfo.get(2);
                        discounted = cartTotal * discountAmount;
                        discountString = String.format("%.0f", (float) discountInfo.get(2) * 100) + "%";

                    } else {

                        //its a dollar amount
                        discountPercent.setText("Discount Amount: $" + String.format("%.2f", (float) discountInfo.get(2)) + " off");
                        discountAmount = (float) discountInfo.get(2);
                        discounted = (float) discountInfo.get(2);
                        discountString = "$" + String.format("%.2f", (float) discountInfo.get(2));
                    }

                    discountID = (int) discountInfo.get(3);
                    discountError.setVisible(false);
                } else {

                    //its an item level discount
                    //we need to get the game ID first
                    //first look into cart
                    for (CartItem item : Lists.cart) {

                        if (item.getProduct().equals(discountInfo.get(5).toString())) {

                            //apply the discount as you normally would but just one item
                            if ((int) discountInfo.get(1) == 0) {

                                //its a percent
                                discountPercent.setText("Discount Amount: " + String.format("%.0f", (float) discountInfo.get(2) * 100) + "% off 1 " + discountInfo.get(5).toString());
                                item.addDiscount((float) discountInfo.get(2), (int) discountInfo.get(1));

                                discountString = String.format("%.0f", (float) discountInfo.get(2) * 100) + "% off 1 " + discountInfo.get(5).toString();

                            } else {

                                //its a dollar amount
                                discountPercent.setText("Discount Amount: $" + String.format("%.2f", (float) discountInfo.get(2)) + " off 1 " + discountInfo.get(5).toString());
                                item.addDiscount((float) discountInfo.get(2), (int) discountInfo.get(1));

                                discountString = "$" + String.format("%.2f", (float) discountInfo.get(2)) + " off 1 " + discountInfo.get(5).toString();
                            }

                            discountID = (int) discountInfo.get(3);
                            discountError.setVisible(false);

                        } else {

                            //display an error message
                            discountPercent.setText(discountInfo.get(5).toString() + " is not in the cart");
                            //also make sure to not waste the discount id if they decide not to use it
                            discountID = 0;

                        }

                    }

                }

            } else {

                discountError.setText(discountInfo.get(0).toString());
                discountError.setVisible(true);
                discountID = 0;
                discountString = "0%";

            }
        } else if (discountInfo.isEmpty()) {

            discountPercent.setText("Discount Amount: 0%");
            discountAmount = 0.00f;
            discounted = 0.00f;
            discountID = 0;
            discountString = "0%";

            for (CartItem item : Lists.cart) {

                item.removeDiscount();

            }
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel cardNumError;
    private javax.swing.JTextField cardNumField;
    private javax.swing.JLabel cardNumLabel;
    private javax.swing.JLabel cartInstructions;
    private javax.swing.JList<String> cartList;
    private javax.swing.JPanel cartPanel;
    private javax.swing.JDialog cartRemoval;
    private javax.swing.JLabel cartTitle;
    private javax.swing.JButton checkoutButton;
    private javax.swing.JLabel checkoutDisclaimer;
    private javax.swing.JLabel checkoutInsructions;
    private javax.swing.JLabel checkoutTitle;
    private javax.swing.JButton clearButton;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JLabel cvvError;
    private javax.swing.JTextField cvvField;
    private javax.swing.JLabel cvvLabel;
    private javax.swing.JLabel dateError;
    private javax.swing.JLabel disclaimer;
    private javax.swing.JButton discountButton;
    private javax.swing.JTextField discountCodeField;
    private javax.swing.JLabel discountCodelabel;
    private javax.swing.JLabel discountError;
    private javax.swing.JLabel discountInstructions;
    private javax.swing.JLabel discountPercent;
    private javax.swing.JLabel discountPrice;
    private javax.swing.JPanel divider1;
    private javax.swing.JPanel divider2;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel expirationDateLabel;
    private javax.swing.JLabel finalTotal;
    private javax.swing.JTextArea gamesNotBought;
    private javax.swing.JButton helpButton;
    private javax.swing.JLabel instructions;
    private javax.swing.JLabel instructions2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton logOutButton;
    private javax.swing.JComboBox<String> monthBox;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel purchaseError;
    private javax.swing.JSpinner quantity;
    private javax.swing.JLabel quantityLabel;
    private javax.swing.JButton quitButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton returnButton;
    private javax.swing.JLabel subtotalLabel;
    private javax.swing.JLabel taxAmount;
    private javax.swing.JLabel totalLabel;
    private javax.swing.JButton updateButton;
    private javax.swing.JComboBox<String> yearBox;
    // End of variables declaration//GEN-END:variables
}
