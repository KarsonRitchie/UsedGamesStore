/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Manager;

import Global.Game;
import Global.Lists;
import Global.Methods;
import Global.Report;
import SQL.SQLManager;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;

/**
 *
 * @author karso
 */
public class AddInventoryPage extends javax.swing.JFrame {

    /**
     * Creates new form AddInventory
     */
    ManagerView manager = null;
    CreateGame gameCreate = null;

    //an arraylist for errors
    ArrayList<String> invErrors = new ArrayList<String>();
    ArrayList<String> amountErrors = new ArrayList<String>();

    //an array list for the labels
    ArrayList<JLabel> errorLabels = new ArrayList<JLabel>();

    public AddInventoryPage(ManagerView manager, CreateGame gameCreate) {
        initComponents();

        this.manager = manager;

        this.gameCreate = gameCreate;

        lists.add(gamesList);
        lists.add(newGamesList);

        errorLabels.add(inventoryError);
        errorLabels.add(amountError);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        controlPanel = new javax.swing.JPanel();
        refreshButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();
        logOutButton = new javax.swing.JButton();
        returnButton = new javax.swing.JButton();
        contentPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        gamesList = new javax.swing.JList<>();
        gameAdding = new javax.swing.JComboBox<>();
        quantityAdded = new javax.swing.JSpinner();
        addButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        newGamesList = new javax.swing.JList<>();
        newButton = new javax.swing.JButton();
        amountField = new javax.swing.JTextField();
        submitButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        newQuantity = new javax.swing.JSpinner();
        updateButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        clearButton1 = new javax.swing.JButton();
        updateButton1 = new javax.swing.JButton();
        newQuantity1 = new javax.swing.JSpinner();
        removeButton1 = new javax.swing.JButton();
        inventoryError = new javax.swing.JLabel();
        amountError = new javax.swing.JLabel();
        databaseError = new javax.swing.JLabel();
        amountLabel = new javax.swing.JLabel();
        addedLabel = new javax.swing.JLabel();
        exisitngNote = new javax.swing.JLabel();
        newLabel = new javax.swing.JLabel();
        newInstruction1 = new javax.swing.JLabel();
        newInstruction2 = new javax.swing.JLabel();
        newInstruction3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        controlPanel.setBackground(new java.awt.Color(65, 146, 217));
        controlPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        refreshButton.setBackground(new java.awt.Color(0, 48, 90));
        refreshButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        refreshButton.setForeground(new java.awt.Color(255, 255, 255));
        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        quitButton.setBackground(new java.awt.Color(0, 48, 90));
        quitButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        quitButton.setForeground(new java.awt.Color(255, 255, 255));
        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        logOutButton.setBackground(new java.awt.Color(0, 48, 90));
        logOutButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        logOutButton.setForeground(new java.awt.Color(255, 255, 255));
        logOutButton.setText("Log Out");
        logOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutButtonActionPerformed(evt);
            }
        });

        returnButton.setBackground(new java.awt.Color(0, 48, 90));
        returnButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        returnButton.setForeground(new java.awt.Color(255, 255, 255));
        returnButton.setText("Return");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(refreshButton, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
            .addComponent(quitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(logOutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(returnButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelLayout.createSequentialGroup()
                .addComponent(returnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 488, Short.MAX_VALUE)
                .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(quitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        contentPanel.setBackground(new java.awt.Color(65, 146, 217));
        contentPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jScrollPane1.setViewportView(gamesList);

        quantityAdded.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                quantityAddedStateChanged(evt);
            }
        });

        addButton.setBackground(new java.awt.Color(0, 48, 90));
        addButton.setForeground(new java.awt.Color(255, 255, 255));
        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(newGamesList);

        newButton.setBackground(new java.awt.Color(0, 48, 90));
        newButton.setForeground(new java.awt.Color(255, 255, 255));
        newButton.setText("New Game");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        amountField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                amountFieldKeyReleased(evt);
            }
        });

        submitButton.setBackground(new java.awt.Color(0, 48, 90));
        submitButton.setForeground(new java.awt.Color(255, 255, 255));
        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        removeButton.setBackground(new java.awt.Color(0, 48, 90));
        removeButton.setForeground(new java.awt.Color(255, 255, 255));
        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        newQuantity.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                newQuantityStateChanged(evt);
            }
        });

        updateButton.setBackground(new java.awt.Color(0, 48, 90));
        updateButton.setForeground(new java.awt.Color(255, 255, 255));
        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        clearButton.setBackground(new java.awt.Color(0, 48, 90));
        clearButton.setForeground(new java.awt.Color(255, 255, 255));
        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        clearButton1.setBackground(new java.awt.Color(0, 48, 90));
        clearButton1.setForeground(new java.awt.Color(255, 255, 255));
        clearButton1.setText("Clear");
        clearButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButton1ActionPerformed(evt);
            }
        });

        updateButton1.setBackground(new java.awt.Color(0, 48, 90));
        updateButton1.setForeground(new java.awt.Color(255, 255, 255));
        updateButton1.setText("Update");
        updateButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButton1ActionPerformed(evt);
            }
        });

        newQuantity1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                newQuantity1StateChanged(evt);
            }
        });

        removeButton1.setBackground(new java.awt.Color(0, 48, 90));
        removeButton1.setForeground(new java.awt.Color(255, 255, 255));
        removeButton1.setText("Remove");
        removeButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButton1ActionPerformed(evt);
            }
        });

        inventoryError.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        inventoryError.setForeground(java.awt.Color.red);
        inventoryError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        inventoryError.setText("At least one item must be added");

        amountError.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        amountError.setForeground(java.awt.Color.red);
        amountError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        amountError.setText("jLabel1");

        databaseError.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        databaseError.setForeground(java.awt.Color.red);
        databaseError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        databaseError.setText("There was a problem. Please try again");

        amountLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        amountLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        amountLabel.setText("Amount");

        addedLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addedLabel.setText("Existing Games");

        exisitngNote.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        exisitngNote.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        exisitngNote.setText("exisiting games will change inventory upon submission");

        newLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        newLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        newLabel.setText("New Games");

        newInstruction1.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        newInstruction1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        newInstruction1.setText("new games are automatically added to the database");

        newInstruction2.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        newInstruction2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        newInstruction2.setText("changed inventory will change even without submission");

        newInstruction3.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        newInstruction3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        newInstruction3.setText("so use the controls on the right with caution");

        javax.swing.GroupLayout contentPanelLayout = new javax.swing.GroupLayout(contentPanel);
        contentPanel.setLayout(contentPanelLayout);
        contentPanelLayout.setHorizontalGroup(
            contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inventoryError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(amountError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(databaseError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(contentPanelLayout.createSequentialGroup()
                        .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(amountLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(amountField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(contentPanelLayout.createSequentialGroup()
                                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(contentPanelLayout.createSequentialGroup()
                                            .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                                                .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(gameAdding, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(quantityAdded))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(removeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                                                .addComponent(newQuantity)
                                                .addComponent(updateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(clearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                        .addGroup(contentPanelLayout.createSequentialGroup()
                                            .addComponent(addedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(125, 125, 125)))
                                    .addGroup(contentPanelLayout.createSequentialGroup()
                                        .addComponent(exisitngNote, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(125, 125, 125)))
                                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(newLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(newButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane2)
                                    .addComponent(newInstruction1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(newInstruction2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(newInstruction3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(submitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(removeButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                            .addComponent(newQuantity1)
                            .addComponent(updateButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(clearButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        contentPanelLayout.setVerticalGroup(
            contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(inventoryError)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(amountError)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(databaseError)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addedLabel)
                    .addComponent(newLabel))
                .addGap(8, 8, 8)
                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exisitngNote)
                    .addComponent(newInstruction1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gameAdding, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newInstruction2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(quantityAdded, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newInstruction3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contentPanelLayout.createSequentialGroup()
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(contentPanelLayout.createSequentialGroup()
                                .addComponent(removeButton)
                                .addGap(18, 18, 18)
                                .addComponent(newQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clearButton))))
                    .addGroup(contentPanelLayout.createSequentialGroup()
                        .addComponent(newButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(contentPanelLayout.createSequentialGroup()
                                .addComponent(removeButton1)
                                .addGap(18, 18, 18)
                                .addComponent(newQuantity1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clearButton1)))))
                .addGap(5, 5, 5)
                .addComponent(amountLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(amountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(submitButton))
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(198, 198, 198)
                .addComponent(contentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(879, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(contentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(controlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        //Refresh the whole page
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        //Quit the program
        System.exit(0);
    }//GEN-LAST:event_quitButtonActionPerformed

    private void logOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutButtonActionPerformed
        this.dispose();

//        Lists.cart.clear();
//
//        if(Variables.currentLevel.equals("Customer")){
//
//            login.run();
//
//        }else{
//
//            try {
//                manager.open();
//            } catch (ParseException ex) {
//                Logger.getLogger(StorePage.class.getName()).log(Level.SEVERE, null, ex);
//            }
//
//        }
    }//GEN-LAST:event_logOutButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        if (gameAdding.getSelectedIndex() > 0) {

            //first check if the game has not already been added
            Game tempGame = new Game(Lists.games.get(gameAdding.getSelectedIndex() - 1));
            boolean wasFound = false;

            for (int x = 0; x < addedGames.size(); x++) {

                if (addedGames.get(x).gameID == tempGame.gameID) {

                    addedGames.get(x).quantity = addedGames.get(x).quantity + (int) quantityAdded.getValue();
                    wasFound = true;
                    x = addedGames.size();

                }

            }

            if (wasFound == false) {
                addedGames.add(tempGame);
                addedGames.getLast().quantity = (int) quantityAdded.getValue();
                System.out.println((int) quantityAdded.getValue());
            }

        }

        refreshList();
    }//GEN-LAST:event_addButtonActionPerformed

    private void quantityAddedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_quantityAddedStateChanged
        if ((int) quantityAdded.getValue() == 0) {

            quantityAdded.setValue(1);

        }
    }//GEN-LAST:event_quantityAddedStateChanged

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        //we need to open the add games page
        //this will create a list that we need
        this.dispose();
        gameCreate.openInv();


    }//GEN-LAST:event_newButtonActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        // TODO add your handling code here:

        validateForm();

        //we need to update the quanities of the games that already existed in the system
//        for (Game game : addedGames) {
//            
//            for (int x = 0; x < Lists.games.size(); x++) {
//                
//                if (Lists.games.get(x).gameID == game.gameID) {
//                    
//                    System.out.println(Lists.games.get(x).quantity);
//                    System.out.println(game.quantity);
//                    
//                    Lists.games.get(x).quantitySave(Lists.games.get(x).quantity + game.quantity);
//                    Lists.games.get(x).databaseSave();
//                    x = Lists.games.size();
//                    
//                }
//                
//            }
//            
//        }
//        
//        Report report = new Report("Report");
//        try {
//            report.tradeReport(addedGames, newGames, Float.parseFloat(amountField.getText()));
//        } catch (Exception ex) {
//            Logger.getLogger(AddInventoryPage.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_submitButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        addedGames.remove(gamesList.getSelectedIndex());
        refreshList();
    }//GEN-LAST:event_removeButtonActionPerformed

    private void newQuantityStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_newQuantityStateChanged
        if ((int) newQuantity.getValue() < 0) {

            newQuantity.setValue(0);

        }
    }//GEN-LAST:event_newQuantityStateChanged

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed

        if (gamesList.getSelectedIndex() != -1) {

            if ((int) newQuantity.getValue() == 0) {

                addedGames.remove(gamesList.getSelectedIndex());

            } else {

                addedGames.get(gamesList.getSelectedIndex()).quantitySave((int) newQuantity.getValue());

            }

            refreshList();

        }

    }//GEN-LAST:event_updateButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        addedGames.clear();
        refreshList();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void removeButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButton1ActionPerformed
        newGames.remove(newGamesList.getSelectedIndex());
        refreshNewList();
    }//GEN-LAST:event_removeButton1ActionPerformed

    private void newQuantity1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_newQuantity1StateChanged
        if ((int) newQuantity1.getValue() < 0) {

            newQuantity1.setValue(0);

        }
    }//GEN-LAST:event_newQuantity1StateChanged

    private void updateButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButton1ActionPerformed
        // TODO add your handling code here:
        if (newGamesList.getSelectedIndex() != -1) {

            if ((int) newQuantity1.getValue() == 0) {

                newGames.remove(newGamesList.getSelectedIndex());

            } else {

                newGames.get(newGamesList.getSelectedIndex()).quantitySave((int) newQuantity1.getValue());
                newGames.get(newGamesList.getSelectedIndex()).databaseSave();

            }

            refreshNewList();

        }
    }//GEN-LAST:event_updateButton1ActionPerformed

    private void clearButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButton1ActionPerformed
        newGames.clear();
        refreshNewList();
    }//GEN-LAST:event_clearButton1ActionPerformed

    private void amountFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_amountFieldKeyReleased
        amountErrors = Methods.checkAmount(amountField);
        Methods.checkForErrors(amountErrors, amountError);
    }//GEN-LAST:event_amountFieldKeyReleased

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        this.dispose();
        try {
            manager.open();
        } catch (ParseException ex) {
            Logger.getLogger(AddInventoryPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_returnButtonActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(AddInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(AddInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(AddInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(AddInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new AddInventory().setVisible(true);
//            }
//        });
//    }
    //some varibales to help with this page
    //we should have lists to help with holding games
    //the first list is games that already exist in the inventory
    public static ArrayList<Game> addedGames = new ArrayList<Game>();
    public static ArrayList<Game> newGames = new ArrayList<Game>();

    //an array list for the lists to check for validation
    ArrayList<JList> lists = new ArrayList<JList>();

    public void open() {

        inventoryError.setVisible(false);
        amountError.setVisible(false);
        databaseError.setVisible(false);

        quantityAdded.setValue(1);

        //to be safe im going to have different refresh items in different functions so we refresh only whats necessary at the moment
        refreshGames();

        //clear the lists on a full open
        addedGames.clear();
        newGames.clear();

        refreshList();
        refreshNewList();

        this.setVisible(true);

    }

    public void reopen(ArrayList<Game> games) {

        inventoryError.setVisible(false);
        databaseError.setVisible(false);

        //first thing we need to do is add to the list
        for (Game game : games) {

            newGames.add(game);

        }

        //now we make a new list model for the new games
        DefaultListModel itemList = new DefaultListModel();

        for (Game game : newGames) {

            String item = game.name + " (" + game.system + ")     x     " + game.quantity;
            itemList.addElement(item);

        }

        newGamesList.setModel(itemList);

        this.setVisible(true);

    }

    public void refreshGames() {

        //we need to access the list of games
        gameAdding.removeAllItems();

        //after all items are removed we need to add to the item box
        //add a default
        gameAdding.addItem("N/A");

        for (Game game : Lists.games) {

            String newGame = game.name + " (" + game.system + ")";
            gameAdding.addItem(newGame);

        }

    }

    public void refreshList() {

        DefaultListModel itemList = new DefaultListModel();

        for (Game game : addedGames) {

            String item = game.name + " (" + game.system + ")     x     " + game.quantity;
            itemList.addElement(item);

        }

        gamesList.setModel(itemList);

    }

    public void refreshNewList() {

        DefaultListModel itemList = new DefaultListModel();

        for (Game game : newGames) {

            String item = game.name + " (" + game.system + ")     x     " + game.quantity;
            itemList.addElement(item);

        }

        newGamesList.setModel(itemList);

    }

    //a function to validate the form
    public void validateForm() {

        //we should make sure the errors are set to invisible with a resubmit
        inventoryError.setVisible(false);
        amountError.setVisible(false);
        databaseError.setVisible(false);

        //first thing we want to check is the lists
        //if both are empty then we cant submit the form
        //i can easily do this here but i want to make a global method for potential future updates
        invErrors = Methods.checkLists(lists);
        Methods.checkForErrors(invErrors, inventoryError);

        //now check the amount
        amountErrors = Methods.checkAmount(amountField);
        Methods.checkForErrors(amountErrors, amountError);

        boolean hasErrors = false;

        for (JLabel label : errorLabels) {

            if (label.isVisible()) {

                hasErrors = true;

            }

        }

        if (hasErrors == false) {

            try {
                for (Game game : addedGames) {

                    for (int x = 0; x < Lists.games.size(); x++) {

                        if (Lists.games.get(x).gameID == game.gameID) {

                            System.out.println(Lists.games.get(x).quantity);
                            System.out.println(game.quantity);

                            Lists.games.get(x).quantitySave(Lists.games.get(x).quantity + game.quantity);
                            Lists.games.get(x).databaseSave();
                            x = Lists.games.size();

                        }

                    }

                }

                //now we save it to the database
                if (SQLManager.tradeReport(addedGames, newGames, Float.parseFloat(amountField.getText()))) {

                    Report report = new Report("Report");
                    try {
                        report.tradeReport(addedGames, newGames, Float.parseFloat(amountField.getText()));
                    } catch (Exception ex) {
                        Logger.getLogger(AddInventoryPage.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    //once this is done open it again to save on making functions
                    open();
                } else {

                    databaseError.setVisible(true);

                }

            } catch (Exception ex) {

                databaseError.setVisible(true);

            }

        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JLabel addedLabel;
    private javax.swing.JLabel amountError;
    private javax.swing.JTextField amountField;
    private javax.swing.JLabel amountLabel;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton clearButton1;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JLabel databaseError;
    private javax.swing.JLabel exisitngNote;
    private javax.swing.JComboBox<String> gameAdding;
    private javax.swing.JList<String> gamesList;
    private javax.swing.JLabel inventoryError;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton logOutButton;
    private javax.swing.JButton newButton;
    private javax.swing.JList<String> newGamesList;
    private javax.swing.JLabel newInstruction1;
    private javax.swing.JLabel newInstruction2;
    private javax.swing.JLabel newInstruction3;
    private javax.swing.JLabel newLabel;
    private javax.swing.JSpinner newQuantity;
    private javax.swing.JSpinner newQuantity1;
    private javax.swing.JSpinner quantityAdded;
    private javax.swing.JButton quitButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton removeButton1;
    private javax.swing.JButton returnButton;
    private javax.swing.JButton submitButton;
    private javax.swing.JButton updateButton;
    private javax.swing.JButton updateButton1;
    // End of variables declaration//GEN-END:variables
}
