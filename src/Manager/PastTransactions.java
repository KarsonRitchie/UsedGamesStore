/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Manager;

import Global.Game;
import Global.Lists;
import Global.Order;
import Global.Variables;
import SQL.SQLManager;
import SQL.SQLStore;
import java.lang.System.Logger;
import java.lang.System.Logger.Level;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author karso
 */
public class PastTransactions extends javax.swing.JFrame {

    /**
     * Creates new form NotificationsView
     */
    ManagerView manager = null;

    public PastTransactions(ManagerView manager) {
        initComponents();

        this.manager = manager;
    }

    int index = 0;

    GregorianCalendar newDate = new GregorianCalendar();

    SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd");

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        controlPanel = new javax.swing.JPanel();
        refreshButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();
        returnButton = new javax.swing.JButton();
        salesReportPanel = new javax.swing.JPanel();
        minMonth = new javax.swing.JComboBox<>();
        minDay = new javax.swing.JComboBox<>();
        minYear = new javax.swing.JComboBox<>();
        maxYear = new javax.swing.JComboBox<>();
        maxMonth = new javax.swing.JComboBox<>();
        maxDay = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        salesReportButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderDisplay = new javax.swing.JTable();
        orderInfo = new javax.swing.JPanel();
        orderNum = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        previousButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/UsedGamesLogo.png")).getImage());

        controlPanel.setBackground(new java.awt.Color(65, 146, 217));
        controlPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        refreshButton.setBackground(new java.awt.Color(0, 48, 90));
        refreshButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        refreshButton.setForeground(new java.awt.Color(255, 255, 255));
        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        quitButton.setBackground(new java.awt.Color(0, 48, 90));
        quitButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        quitButton.setForeground(new java.awt.Color(255, 255, 255));
        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        returnButton.setBackground(new java.awt.Color(0, 48, 90));
        returnButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        returnButton.setForeground(new java.awt.Color(255, 255, 255));
        returnButton.setText("Return");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        salesReportPanel.setBackground(new java.awt.Color(65, 146, 217));

        minMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        minMonth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                minMonthItemStateChanged(evt);
            }
        });

        minDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        minYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2021", "2022", "2023", "2024", "2025", "2026" }));

        maxYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2021", "2022", "2023", "2024", "2025", "2026" }));

        maxMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        maxMonth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                maxMonthItemStateChanged(evt);
            }
        });

        maxDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Start");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("End");

        salesReportButton.setBackground(new java.awt.Color(0, 48, 90));
        salesReportButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        salesReportButton.setForeground(new java.awt.Color(255, 255, 255));
        salesReportButton.setText("Sales Report");
        salesReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesReportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout salesReportPanelLayout = new javax.swing.GroupLayout(salesReportPanel);
        salesReportPanel.setLayout(salesReportPanelLayout);
        salesReportPanelLayout.setHorizontalGroup(
            salesReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(salesReportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(salesReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(minYear, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(salesReportPanelLayout.createSequentialGroup()
                        .addComponent(minMonth, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(minDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(maxYear, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(salesReportPanelLayout.createSequentialGroup()
                        .addComponent(maxMonth, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(maxDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(salesReportButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        salesReportPanelLayout.setVerticalGroup(
            salesReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(salesReportPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(salesReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(minYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(salesReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maxYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(salesReportButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(refreshButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(quitButton, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
            .addComponent(returnButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(controlPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(salesReportPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelLayout.createSequentialGroup()
                .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 322, Short.MAX_VALUE)
                .addComponent(returnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(quitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(controlPanelLayout.createSequentialGroup()
                    .addGap(116, 116, 116)
                    .addComponent(salesReportPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(117, 117, 117)))
        );

        orderDisplay.setBackground(new java.awt.Color(122, 186, 242));
        orderDisplay.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(orderDisplay);

        orderInfo.setBackground(new java.awt.Color(122, 186, 242));

        orderNum.setText("Order Number ");

        dateLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        dateLabel.setText("Date:");

        javax.swing.GroupLayout orderInfoLayout = new javax.swing.GroupLayout(orderInfo);
        orderInfo.setLayout(orderInfoLayout);
        orderInfoLayout.setHorizontalGroup(
            orderInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(orderNum, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        orderInfoLayout.setVerticalGroup(
            orderInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, orderInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(orderInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(orderNum, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(dateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        previousButton.setBackground(new java.awt.Color(0, 48, 90));
        previousButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        previousButton.setForeground(new java.awt.Color(255, 255, 255));
        previousButton.setText("Previous Transaction");
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });

        nextButton.setBackground(new java.awt.Color(0, 48, 90));
        nextButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        nextButton.setForeground(new java.awt.Color(255, 255, 255));
        nextButton.setText("Next Transaction");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(orderInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(previousButton, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(controlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(orderInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(previousButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        createOrders();

        if (!Lists.orders.isEmpty()) {
            index = 0;

            //also set the order to be the first by default
            displayOrder(index);

        } else {

            displayEmpty();

        }

    }//GEN-LAST:event_refreshButtonActionPerformed

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        //Quit the program
        System.exit(0);
    }//GEN-LAST:event_quitButtonActionPerformed

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        this.dispose();

        try {
            manager.open();
        } catch (ParseException ex) {
            java.util.logging.Logger.getLogger(PastTransactions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_returnButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed

        //we should check if it can keep going
        if (index + 1 < Lists.orders.size()) {

            index++;

        } else {

            index = 0;

        }

        displayOrder(index);

    }//GEN-LAST:event_nextButtonActionPerformed

    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed

        //the next but inverse it to fit with going backwards
        if (index - 1 < 0) {

            index = Lists.orders.size() - 1;

        } else {

            index--;

        }

        displayOrder(index);
    }//GEN-LAST:event_previousButtonActionPerformed

    private void minMonthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_minMonthItemStateChanged
        //Now we remove the days

        newDate.set(newDate.MONTH, minMonth.getSelectedIndex() + 1);
        newDate.set(newDate.DAY_OF_MONTH, 1);
        newDate.set(newDate.YEAR, Integer.parseInt(minYear.getSelectedItem().toString()));

        minDay.removeAllItems();

        minDay.addItem("" + newDate.get(newDate.DAY_OF_MONTH));

        for (int x = 0; x < 32; x++) {

            //Same principle as the months
            newDate.roll(newDate.DAY_OF_MONTH, 1);

            if (newDate.get(newDate.DAY_OF_MONTH) == 1) {
                break;
            }

            minDay.addItem("" + newDate.get(newDate.DAY_OF_MONTH));

        }
    }//GEN-LAST:event_minMonthItemStateChanged

    private void maxMonthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_maxMonthItemStateChanged
        newDate.set(newDate.MONTH, maxMonth.getSelectedIndex() + 1);
        newDate.set(newDate.DAY_OF_MONTH, 1);
        newDate.set(newDate.YEAR, Integer.parseInt(maxYear.getSelectedItem().toString()));

        maxDay.removeAllItems();

        maxDay.addItem("" + newDate.get(newDate.DAY_OF_MONTH));

        for (int x = 0; x < 32; x++) {

            //Same principle as the months
            newDate.roll(newDate.DAY_OF_MONTH, 1);

            if (newDate.get(newDate.DAY_OF_MONTH) == 1) {
                break;
            }

            maxDay.addItem("" + newDate.get(newDate.DAY_OF_MONTH));

        }
    }//GEN-LAST:event_maxMonthItemStateChanged

    private void salesReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salesReportButtonActionPerformed

        //we will now get a report based on the dates given
        //make two calender objects
        GregorianCalendar startDate = new GregorianCalendar();
        GregorianCalendar endDate = new GregorianCalendar();

        startDate.set(startDate.YEAR, Integer.parseInt(minYear.getSelectedItem().toString()));
        startDate.set(startDate.MONTH, minMonth.getSelectedIndex() + 1);
        startDate.set(startDate.DAY_OF_MONTH, Integer.parseInt(minDay.getSelectedItem().toString()));

        endDate.set(endDate.YEAR, Integer.parseInt(maxYear.getSelectedItem().toString()));
        endDate.set(endDate.MONTH, maxMonth.getSelectedIndex() + 1);
        endDate.set(endDate.DAY_OF_MONTH, Integer.parseInt(maxDay.getSelectedItem().toString()));

        //now format them
        String formatStartDate = dateFormatter.format(startDate.getTime());
        String formatEndDate = dateFormatter.format(endDate.getTime());

        try {
            //now we will call upon a method in sql manager
            //there will be two different type of sales reports
            //so use a boolean to differentiate
            SQLManager.salesReport(true, formatStartDate, formatEndDate);
        } catch (Exception ex) {
            System.out.println(ex);
        }

    }//GEN-LAST:event_salesReportButtonActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(NotificationsView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(NotificationsView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(NotificationsView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(NotificationsView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new NotificationsView().setVisible(true);
//            }
//        });
//    }
    public void open() {

        //so we call on some methods and just set it visible
        //we should seperate table creation into methods so we can reuse them for a refresh
        createOrders();

        if (!Lists.orders.isEmpty()) {
            index = 0;

            //also set the order to be the first by default
            displayOrder(index);

        } else {

            displayEmpty();

        }

        minYear.setSelectedIndex(0);
        maxYear.setSelectedIndex(0);

        minMonth.setSelectedIndex(1);
        minMonth.setSelectedIndex(0);
        maxMonth.setSelectedIndex(1);
        maxMonth.setSelectedIndex(0);

        this.setVisible(true);

    }

    public void createOrders() {

        SQLManager.retrieveOrders(Variables.customerID);

    }

    public void displayOrder(int index) {

        orderNum.setText("Order Number " + (index + 1));
        dateLabel.setText("Date: " + Lists.orders.get(index).orderDate);

        DefaultTableModel orders = new DefaultTableModel() {

            @Override
            public boolean isCellEditable(int row, int column) {

                return false;

            }

        };

        orders.addColumn("Game");
        orders.addColumn("Quantity");
        orders.addColumn("Total");

        //first we need to display the games bought for this order
        Order tempOrder = Lists.orders.get(index);

        for (ArrayList game : tempOrder.gamesBought) {

            Object[] displayedInfo = {game.get(0), game.get(2), game.get(3)};

            orders.addRow(displayedInfo);

        }

        //once thats done we now display the other info
        Object[] finalInfoSpace = {"", "", "", ""};
        orders.addRow(finalInfoSpace);

        Object[] subtotal = {"", "Subtotal", "$" + String.format("%.2f", tempOrder.subtotal)};
        orders.addRow(subtotal);

        if (tempOrder.discountID != 0) {

            //this will display discount info
            if (tempOrder.discountLevel == 0) {
                Object[] discounted = {"Discount", tempOrder.discountAmount, "-($" + String.format("%.2f", tempOrder.takenOff) + ") from cart"};
                orders.addRow(discounted);
                
                Object[] discountTotal = {"", "Discounted Subtotal", "$" + String.format("%.2f", tempOrder.discounted)};
                orders.addRow(discountTotal);
            } else {

                Object[] discounted = {"Discount", "at item level", "-($" + String.format("%.2f", tempOrder.takenOff) + ") from cart"};
                orders.addRow(discounted);
                
                Object[] discountTotal = {"", "Discounted Subtotal", "$" + String.format("%.2f", tempOrder.subtotal)};
                orders.addRow(discountTotal);
            }

        }

        //display the rest of the data
        Object[] tax = {"", "Tax", "$" + String.format("%.2f", tempOrder.tax)};
        orders.addRow(tax);

        Object[] finalTotal = {"", "Final Total", "$" + String.format("%.2f", tempOrder.finalTotal)};
        orders.addRow(finalTotal);

        orderDisplay.setModel(orders);

    }

    public void displayEmpty() {

        orderNum.setText("Order Number 0");
        dateLabel.setText("It seems none have been made");

        DefaultTableModel orders = new DefaultTableModel() {

            @Override
            public boolean isCellEditable(int row, int column) {

                return false;

            }

        };

        orders.addColumn("Game");
        orders.addColumn("Quantity");
        orders.addColumn("Total");

        orderDisplay.setModel(orders);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel controlPanel;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> maxDay;
    private javax.swing.JComboBox<String> maxMonth;
    private javax.swing.JComboBox<String> maxYear;
    private javax.swing.JComboBox<String> minDay;
    private javax.swing.JComboBox<String> minMonth;
    private javax.swing.JComboBox<String> minYear;
    private javax.swing.JButton nextButton;
    private javax.swing.JTable orderDisplay;
    private javax.swing.JPanel orderInfo;
    private javax.swing.JLabel orderNum;
    private javax.swing.JButton previousButton;
    private javax.swing.JButton quitButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton returnButton;
    private javax.swing.JButton salesReportButton;
    private javax.swing.JPanel salesReportPanel;
    // End of variables declaration//GEN-END:variables
}
