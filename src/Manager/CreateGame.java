/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Manager;

import Global.Game;
import Global.Lists;
import Manager.ManagerView;
import SQL.SQLImages;
import SQL.SQLManager;
//import com.mysql.cj.jdbc.Blob;
import java.awt.Image;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * This class is the CreateGame page.
 * 
 * <br><br>
 * This page allows the manager to be able to create a game and see the previews the users will see when browsing the inventory 
 * in real time as they put in information. The validation is also in real time, at least ones without the database to help create a fluid program.
 * 
 * <br><br>
 * When the managers submits a game and there are no errors with the games information, the fields will all become disabled. When submitting a game, 
 * the first thing to be created in the database is the games information, and then images will be saved. Each can provide their own errors so the 
 * game can be valid, but the images may not be uploaded. So the images can be resubmitted without complicating the associated game. You can 
 * even save them again if you decide on different images than you had before.
 * 
 * <br><br>
 * The only way to start from scratch is to press the new game button, which will bring the page back to a default state and allow you to submit 
 * another game.
 */
public class CreateGame extends javax.swing.JFrame {
    
    ManagerView manager = null;
    AddInventoryPage addInv = null;

    //a list of jlabel elements
    ArrayList<JLabel> errorMessages = new ArrayList<JLabel>();
    private boolean gameUploaded = false;

    ArrayList<Game> games = new ArrayList<Game>();

    /**
     * Creates the create game page to allow users to create games to add to the inventory.
     * 
     * @param manager
     * This object is a ManagerView object, this is so we can bring this class here and be able to call any methods we need. This method will most 
     * likely be just open, since the the method we need the least is the ability to reopen the previous page.
     */
    public CreateGame(ManagerView manager) {
        initComponents();

        this.manager = manager;

        //set the array list
        errorMessages.add(titleError);
        errorMessages.add(sysGenErrorLabel);
        errorMessages.add(descErrorLabel);
        errorMessages.add(quantityError);
        errorMessages.add(priceError);
        errorMessages.add(gameExistsError);

    }

    /**
     * We may come from the add inventory page and will need to go back to it. So this method is used 
     * to be able to create an AddInventoryPage object.
     * 
     * @param addInv
     * This is the made AddInventoryPage object that is being passed on so we can return to that page from here without trouble and be able to properly 
     * save the games we need if we come from that page.
     */
    public void addInventoryPage(AddInventoryPage addInv) {

        //Adds the add inventory page
        this.addInv = addInv;

    }

    //A variable to hold the game ID
    int gameID = 0;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gameCreation = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        titleField = new javax.swing.JTextArea();
        systemLabel = new javax.swing.JLabel();
        systemBox = new javax.swing.JComboBox<>();
        genreBox = new javax.swing.JComboBox<>();
        genreLabel = new javax.swing.JLabel();
        descriptionLabel = new javax.swing.JLabel();
        descriptionField = new javax.swing.JTextArea();
        quantityLabel = new javax.swing.JLabel();
        quantityField = new javax.swing.JSpinner();
        restockField = new javax.swing.JSpinner();
        restockLabel = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        priceField = new javax.swing.JTextField();
        mainImageButton = new javax.swing.JButton();
        thumbnailButton = new javax.swing.JButton();
        returnButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        titleError = new javax.swing.JLabel();
        descErrorLabel = new javax.swing.JLabel();
        sysGenErrorLabel = new javax.swing.JLabel();
        quantityError = new javax.swing.JLabel();
        priceError = new javax.swing.JLabel();
        saveImageButton = new javax.swing.JButton();
        newGameButton = new javax.swing.JButton();
        thumbnailError = new javax.swing.JLabel();
        mainImageError = new javax.swing.JLabel();
        gameError = new javax.swing.JLabel();
        gameSuccess = new javax.swing.JLabel();
        imageSuccess = new javax.swing.JLabel();
        gameExistsError = new javax.swing.JLabel();
        gameDisplay = new Global.GameDisplay();
        gamePanel = new javax.swing.JPanel();
        image = new javax.swing.JLabel();
        buyButton = new javax.swing.JButton();
        quanity = new javax.swing.JLabel();
        price = new javax.swing.JLabel();
        amountBuying = new javax.swing.JSpinner();
        amountBuyingLabel = new javax.swing.JLabel();
        returnButton1 = new javax.swing.JButton();
        totalLabel = new javax.swing.JLabel();
        infoContainer = new javax.swing.JLayeredPane();
        gameSystem = new javax.swing.JLabel();
        gameGenre = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        gameTitle = new javax.swing.JTextArea();
        gameDescription = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/UsedGamesLogo.png")).getImage());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        gameCreation.setBackground(new java.awt.Color(65, 146, 217));

        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Title");

        titleField.setColumns(20);
        titleField.setLineWrap(true);
        titleField.setRows(5);
        titleField.setWrapStyleWord(true);
        titleField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                titleFieldKeyReleased(evt);
            }
        });

        systemLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        systemLabel.setText("System");

        systemBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                systemBoxItemStateChanged(evt);
            }
        });

        genreBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                genreBoxItemStateChanged(evt);
            }
        });

        genreLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        genreLabel.setText("Genre");

        descriptionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        descriptionLabel.setText("Description");

        descriptionField.setColumns(20);
        descriptionField.setLineWrap(true);
        descriptionField.setRows(5);
        descriptionField.setWrapStyleWord(true);
        descriptionField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                descriptionFieldKeyReleased(evt);
            }
        });

        quantityLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        quantityLabel.setText("Quantity");

        quantityField.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                quantityFieldStateChanged(evt);
            }
        });

        restockField.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                restockFieldStateChanged(evt);
            }
        });

        restockLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        restockLabel.setText("Restock Threshold");

        priceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        priceLabel.setText("Price");

        priceField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                priceFieldKeyReleased(evt);
            }
        });

        mainImageButton.setBackground(new java.awt.Color(0, 48, 90));
        mainImageButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        mainImageButton.setForeground(new java.awt.Color(255, 255, 255));
        mainImageButton.setText("Upload Main Image");
        mainImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainImageButtonActionPerformed(evt);
            }
        });

        thumbnailButton.setBackground(new java.awt.Color(0, 48, 90));
        thumbnailButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        thumbnailButton.setForeground(new java.awt.Color(255, 255, 255));
        thumbnailButton.setText("Upload Thumbnail");
        thumbnailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thumbnailButtonActionPerformed(evt);
            }
        });

        returnButton.setBackground(new java.awt.Color(0, 48, 90));
        returnButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        returnButton.setForeground(new java.awt.Color(255, 255, 255));
        returnButton.setText("Return");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        saveButton.setBackground(new java.awt.Color(0, 48, 90));
        saveButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        saveButton.setForeground(new java.awt.Color(255, 255, 255));
        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        titleError.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        titleError.setForeground(java.awt.Color.red);
        titleError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleError.setText("Title is Reqiured");

        descErrorLabel.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        descErrorLabel.setForeground(java.awt.Color.red);
        descErrorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        descErrorLabel.setText("Description is Required");

        sysGenErrorLabel.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        sysGenErrorLabel.setForeground(java.awt.Color.red);
        sysGenErrorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sysGenErrorLabel.setText("System and Genre Required");

        quantityError.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        quantityError.setForeground(java.awt.Color.red);
        quantityError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        quantityError.setText("Need at least one in stock");

        priceError.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        priceError.setForeground(java.awt.Color.red);
        priceError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        priceError.setText("Price is required");

        saveImageButton.setBackground(new java.awt.Color(0, 48, 90));
        saveImageButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        saveImageButton.setForeground(new java.awt.Color(255, 255, 255));
        saveImageButton.setText("Resave Images");
        saveImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveImageButtonActionPerformed(evt);
            }
        });

        newGameButton.setBackground(new java.awt.Color(0, 48, 90));
        newGameButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        newGameButton.setForeground(new java.awt.Color(255, 255, 255));
        newGameButton.setText("New Game");
        newGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameButtonActionPerformed(evt);
            }
        });

        thumbnailError.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        thumbnailError.setForeground(java.awt.Color.red);
        thumbnailError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        thumbnailError.setText("Thumbnail didn't upload");

        mainImageError.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        mainImageError.setForeground(java.awt.Color.red);
        mainImageError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mainImageError.setText("Main image didn't upload");

        gameError.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        gameError.setForeground(java.awt.Color.red);
        gameError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gameError.setText("Game Didnt Save, Try Again");

        gameSuccess.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        gameSuccess.setForeground(new java.awt.Color(0, 204, 153));
        gameSuccess.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gameSuccess.setText("Game is Saved");

        imageSuccess.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        imageSuccess.setForeground(new java.awt.Color(0, 204, 153));
        imageSuccess.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageSuccess.setText("Images Are Saved");

        gameExistsError.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        gameExistsError.setForeground(java.awt.Color.red);
        gameExistsError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gameExistsError.setText("Game on this platform was made already");

        javax.swing.GroupLayout gameCreationLayout = new javax.swing.GroupLayout(gameCreation);
        gameCreation.setLayout(gameCreationLayout);
        gameCreationLayout.setHorizontalGroup(
            gameCreationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gameCreationLayout.createSequentialGroup()
                .addGroup(gameCreationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gameCreationLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(descErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(gameCreationLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(quantityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(restockLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(gameCreationLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(restockField))
                    .addGroup(gameCreationLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(gameCreationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mainImageButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(descriptionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(gameCreationLayout.createSequentialGroup()
                                .addGroup(gameCreationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(systemLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(systemBox, 0, 166, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(gameCreationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(genreBox, 0, 166, Short.MAX_VALUE)
                                    .addComponent(genreLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(titleField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(thumbnailButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(returnButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(descriptionField)
                            .addComponent(quantityField)
                            .addComponent(priceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(priceField)
                            .addComponent(titleError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(gameCreationLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(quantityError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(priceError, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(gameCreationLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(sysGenErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(gameCreationLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(saveImageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(gameCreationLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(newGameButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(gameCreationLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(thumbnailError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(gameCreationLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(mainImageError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(gameCreationLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(gameError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(gameCreationLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(gameSuccess, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(gameCreationLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(imageSuccess, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(gameCreationLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(gameExistsError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        gameCreationLayout.setVerticalGroup(
            gameCreationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gameCreationLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(titleField, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(titleError)
                .addGap(20, 20, 20)
                .addGroup(gameCreationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gameCreationLayout.createSequentialGroup()
                        .addComponent(systemLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(systemBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(gameCreationLayout.createSequentialGroup()
                        .addComponent(genreLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(genreBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sysGenErrorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gameExistsError)
                .addGap(20, 20, 20)
                .addComponent(descriptionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(descriptionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descErrorLabel)
                .addGap(22, 22, 22)
                .addComponent(quantityLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(quantityError)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(restockLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(restockField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(priceLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(priceError)
                .addGap(18, 18, 18)
                .addComponent(thumbnailButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainImageButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveImageButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(thumbnailError)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainImageError)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imageSuccess)
                .addGap(18, 18, 18)
                .addComponent(gameError)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gameSuccess)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(returnButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newGameButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gamePanel.setBackground(new java.awt.Color(65, 146, 217));

        image.setBackground(new java.awt.Color(51, 51, 51));
        image.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        image.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        image.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MainImagePlaceholder.png"))); // NOI18N
        image.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        buyButton.setBackground(new java.awt.Color(0, 48, 90));
        buyButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        buyButton.setForeground(new java.awt.Color(255, 255, 255));
        buyButton.setText("Add to Cart");
        buyButton.setToolTipText("");
        buyButton.setEnabled(false);

        quanity.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        quanity.setText("jLabel1");

        price.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        price.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        price.setText("jLabel1");

        amountBuying.setEnabled(false);

        amountBuyingLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        amountBuyingLabel.setText("Quantity:");

        returnButton1.setBackground(new java.awt.Color(0, 48, 90));
        returnButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        returnButton1.setForeground(new java.awt.Color(255, 255, 255));
        returnButton1.setText("Return");
        returnButton1.setEnabled(false);

        totalLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        totalLabel.setText("Total: $0.00");

        gameSystem.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        gameSystem.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gameSystem.setText("System");

        gameGenre.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        gameGenre.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gameGenre.setText("Genre");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane1.setWheelScrollingEnabled(false);

        gameTitle.setColumns(20);
        gameTitle.setLineWrap(true);
        gameTitle.setRows(5);
        gameTitle.setWrapStyleWord(true);
        jScrollPane1.setViewportView(gameTitle);

        infoContainer.setLayer(gameSystem, javax.swing.JLayeredPane.DEFAULT_LAYER);
        infoContainer.setLayer(gameGenre, javax.swing.JLayeredPane.DEFAULT_LAYER);
        infoContainer.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout infoContainerLayout = new javax.swing.GroupLayout(infoContainer);
        infoContainer.setLayout(infoContainerLayout);
        infoContainerLayout.setHorizontalGroup(
            infoContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gameSystem, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, infoContainerLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(infoContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, infoContainerLayout.createSequentialGroup()
                    .addGap(0, 133, Short.MAX_VALUE)
                    .addComponent(gameGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        infoContainerLayout.setVerticalGroup(
            infoContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, infoContainerLayout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gameSystem, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(infoContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(infoContainerLayout.createSequentialGroup()
                    .addGap(104, 104, 104)
                    .addComponent(gameGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        gameDescription.setEditable(false);
        gameDescription.setColumns(20);
        gameDescription.setRows(5);
        gameDescription.setToolTipText("");
        gameDescription.setWrapStyleWord(true);

        javax.swing.GroupLayout gamePanelLayout = new javax.swing.GroupLayout(gamePanel);
        gamePanel.setLayout(gamePanelLayout);
        gamePanelLayout.setHorizontalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(image, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gamePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(infoContainer)
                    .addComponent(amountBuyingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(amountBuying, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(buyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(gamePanelLayout.createSequentialGroup()
                        .addComponent(quanity, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(returnButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(totalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gamePanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(gameDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        gamePanelLayout.setVerticalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gamePanelLayout.createSequentialGroup()
                .addComponent(image, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(infoContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(gameDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quanity, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(amountBuyingLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(amountBuying, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalLabel)
                .addGap(88, 88, 88)
                .addComponent(returnButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(gameCreation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(gameDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(gamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(gameCreation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(132, 132, 132)
                .addComponent(gameDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(502, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void titleFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_titleFieldKeyReleased

        //update the title in previews in real time
        //Also validates the title
        if (!titleField.getText().isBlank()) {

            gameTitle.setText(titleField.getText());
            gameDisplay.gameTitle.setText(titleField.getText());
            titleError.setVisible(false);

        } else {

            gameTitle.setText("");
            gameDisplay.gameTitle.setText(titleField.getText());
            titleError.setVisible(true);

        }

        gameExistsError.setVisible(false);

    }//GEN-LAST:event_titleFieldKeyReleased

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        
        //Dispose of this page
        this.dispose();

        //If not from add inventory page then just reopen the manager page. If so, then reopen that page and use the games list you created
        if (fromInv == false) {
            try {
                manager.open();
            } catch (ParseException ex) {
                Logger.getLogger(CreateGame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {

            fromInv = false;
            addInv.reopen(games);

        }
    }//GEN-LAST:event_returnButtonActionPerformed

    //The next few are for input validation
    //Make sure you are updating the preview in real time as well
    private void descriptionFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_descriptionFieldKeyReleased
        if (!descriptionField.getText().isBlank()) {

            gameDescription.setText(descriptionField.getText());
            descErrorLabel.setVisible(false);

        } else {

            gameDescription.setText("");
            descErrorLabel.setVisible(true);

        }
    }//GEN-LAST:event_descriptionFieldKeyReleased

    private void systemBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_systemBoxItemStateChanged
        if (systemBox.getSelectedIndex() == 0) {

            sysGenErrorLabel.setVisible(true);
            gameSystem.setText(systemBox.getSelectedItem().toString());
            gameDisplay.systemLabel.setText(systemBox.getSelectedItem().toString());

        } else if (systemBox.getSelectedIndex() >= 1) {

            gameSystem.setText(systemBox.getSelectedItem().toString());
            gameDisplay.systemLabel.setText(systemBox.getSelectedItem().toString());

        }

        if (systemBox.getSelectedIndex() != 0 && genreBox.getSelectedIndex() != 0) {

            sysGenErrorLabel.setVisible(false);

        }

        gameExistsError.setVisible(false);
    }//GEN-LAST:event_systemBoxItemStateChanged

    private void genreBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_genreBoxItemStateChanged
        if (genreBox.getSelectedIndex() == 0) {

            sysGenErrorLabel.setVisible(true);
            gameGenre.setText(genreBox.getSelectedItem().toString());
            gameDisplay.genreLabel.setText(genreBox.getSelectedItem().toString());

        } else if (genreBox.getSelectedIndex() >= 1) {

            gameGenre.setText(genreBox.getSelectedItem().toString());
            gameDisplay.genreLabel.setText(genreBox.getSelectedItem().toString());

        }

        //do an if statement here that accounts for both
        if (systemBox.getSelectedIndex() != 0 && genreBox.getSelectedIndex() != 0) {

            sysGenErrorLabel.setVisible(false);

        }
    }//GEN-LAST:event_genreBoxItemStateChanged

    private void quantityFieldStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_quantityFieldStateChanged

        if ((int) quantityField.getValue() <= 0) {

            quantityField.setValue(0);
            quantityError.setVisible(true);

        } else {

            quantityError.setVisible(false);

        }

        //also make sure its not less than restock
        if ((int) quantityField.getValue() < (int) restockField.getValue()) {

            restockField.setValue((int) quantityField.getValue());

        }

        quanity.setText(quantityField.getValue() + " Left");
        gameDisplay.quantityLabel.setText(quantityField.getValue() + " Left");

    }//GEN-LAST:event_quantityFieldStateChanged

    private void restockFieldStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_restockFieldStateChanged
        if ((int) restockField.getValue() <= 0) {

            restockField.setValue(0);

        } else if ((int) restockField.getValue() > (int) quantityField.getValue()) {

            restockField.setValue(quantityField.getValue());

        }
    }//GEN-LAST:event_restockFieldStateChanged

    private void priceFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priceFieldKeyReleased
        if (priceField.getText().isEmpty()) {

            priceError.setVisible(true);

        } else {

            priceError.setVisible(false);
            price.setText("$" + String.format("%.2f", Float.parseFloat(priceField.getText())));
            gameDisplay.gamePrice.setText("$" + String.format("%.2f", Float.parseFloat(priceField.getText())));
        }


    }//GEN-LAST:event_priceFieldKeyReleased

    //The next two uploads images of certain types depending on what button is pressed
    private void thumbnailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thumbnailButtonActionPerformed
        uploadImage(0);
    }//GEN-LAST:event_thumbnailButtonActionPerformed

    private void mainImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainImageButtonActionPerformed
        uploadImage(1);
    }//GEN-LAST:event_mainImageButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed

        //the first thing we need to do is upload the main data
        //afterwards we can save the images
        //images are impossible to upload without the game uploaded as well since it uses game id
        //we are going to do this by calling on a method that checks on validation
        validateGame();

        //if(SQLManager.addGame(titleField.getText(), Float.parseFloat(priceField.getText()), ))

    }//GEN-LAST:event_saveButtonActionPerformed

    private void saveImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveImageButtonActionPerformed
        
        //uplaod the images
        uploadImages();
    }//GEN-LAST:event_saveImageButtonActionPerformed

    private void newGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameButtonActionPerformed
        
        //Reopen the page to set it back to default
        open();
    }//GEN-LAST:event_newGameButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
        //as the form is closing delete the games in the list if from add inventory
        if(fromInv == true){
        
            for(Game game : games){
            
                SQLManager.deleteGame(game.gameID);
            
            }
            
        }
    }//GEN-LAST:event_formWindowClosing

//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(CreateGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(CreateGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(CreateGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(CreateGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new CreateGame().setVisible(true);
//            }
//        });
//    }
    
    /**
     * Just a class for placeholder images
     */
    public class Placeholder {

        int imageType = 0;
        ArrayList<byte[]> bList = new ArrayList<byte[]>();
        boolean needsUploading = false;

    }

    //Image placeholders
    Placeholder mainImage = new Placeholder();
    Placeholder thumbnailImage = new Placeholder();

    //a boolean to know if were opening from inventory page
    boolean fromInv = false;

    /**
     * Opens the form
     */
    public void open() {

        //first create the system and genre list
        //Also set the ui elements to be enabled to
        gameUploaded = false;

        titleField.setEnabled(true);
        descriptionField.setEnabled(true);
        priceField.setEnabled(true);
        quantityField.setEnabled(true);
        restockField.setEnabled(true);
        genreBox.setEnabled(true);
        systemBox.setEnabled(true);
        saveButton.setEnabled(true);
        saveImageButton.setEnabled(false);

        systemBox.removeAllItems();
        systemBox.addItem("N/A");

        for (String console : Lists.consoles) {

            systemBox.addItem(console);

        }

        genreBox.removeAllItems();
        genreBox.addItem("N/A");

        for (String genre : Lists.genres) {

            genreBox.addItem(genre);

        }

        //set things to default
        titleField.setText("");
        descriptionField.setText("");
        priceField.setText("");
        quantityField.setValue(0);
        restockField.setValue(0);

        //the shop info display preview
        quanity.setText(quantityField.getValue() + " Left");
        gameSystem.setText(systemBox.getSelectedItem().toString());
        gameGenre.setText(genreBox.getSelectedItem().toString());
        price.setText("$0.00");
        gameTitle.setText(titleField.getText());
        gameDescription.setText(descriptionField.getText());

        //the game dsiplay preview
        gameDisplay.gameTitle.setText(titleField.getText());
        gameDisplay.systemLabel.setText(systemBox.getSelectedItem().toString());
        gameDisplay.genreLabel.setText(genreBox.getSelectedItem().toString());
        gameDisplay.quantityLabel.setText(quantityField.getValue() + " Left");
        gameDisplay.gamePrice.setText("$0.00");

        //hide errors
        titleError.setVisible(false);
        descErrorLabel.setVisible(false);
        sysGenErrorLabel.setVisible(false);
        quantityError.setVisible(false);
        priceError.setVisible(false);
        thumbnailError.setVisible(false);
        mainImageError.setVisible(false);
        gameError.setVisible(false);

        imageSuccess.setVisible(false);
        gameSuccess.setVisible(false);

        //we also want to make two placeholder objects for images
        //also make the main image have 1 as its type
        mainImage.imageType = 1;
        thumbnailImage.imageType = 0;

        mainImage.bList.clear();
        thumbnailImage.bList.clear();

        //make the thumbnail and main image placeholders again
        gameDisplay.image.setIcon((Icon) Lists.images.get(1)[2]);
        image.setIcon((Icon) Lists.images.get(0)[2]);

        this.setVisible(true);

    }

    /**
     * Only ran from the AddInventory page and opens it from there. Meant to change some functionality of the page to better suit the add inventory page.
     */
    public void openInv() {

        fromInv = true;
        games.clear();
        open();

    }

    /**
     * This disables all items except uploading pictures. 
     * This is to save pictures seperatly and resave them if there is trouble uploading them.
     */
    public void disableItems() {

        //when a game is uploaded we want to disable a lot of the fields
        //this is so we can make sure images are uploaded and are correct
        //if a new game needs to be uploaded new game button will be at the bottom
        titleField.setEnabled(false);
        descriptionField.setEnabled(false);
        priceField.setEnabled(false);
        quantityField.setEnabled(false);
        restockField.setEnabled(false);
        genreBox.setEnabled(false);
        systemBox.setEnabled(false);
        saveButton.setEnabled(false);

    }

    /**
     * Uploads an image
     * 
     * @param imageType
     * The image type (0 is thumbnail, 1 is main image)
     */
    public void uploadImage(int imageType) {

        FileNameExtensionFilter fileFilter = new FileNameExtensionFilter("Image Files", "png", "jpg");

        JFileChooser newImage = new JFileChooser();

        newImage.setAcceptAllFileFilterUsed(false);
        newImage.setFileFilter(fileFilter);

        newImage.setMultiSelectionEnabled(false);

        newImage.showOpenDialog(this);

        //now we get the image selected
        File tempImage = newImage.getSelectedFile();

        //now we upload it and use it
        //it being uploaded to the database will be done in a new sql class
        //incase uploading fails do not change any images until its uploaded
        File imageFile = new File(tempImage.getPath());

        try {

            //Now that we got the image the way we want it
            //we can now use an if statment to set it up properly
            if (imageType == 0) {
                thumbnailImage.bList.clear();
                byte[] b = Files.readAllBytes(imageFile.toPath());
                //we should save the byte array as well to upload it to the database
                thumbnailImage.bList.add(b);

                ImageIcon newIcon = new ImageIcon(b);

                Image tempIcon = newIcon.getImage();

                gameDisplay.image.setIcon(new ImageIcon(tempIcon.getScaledInstance(226, 126, 0)));
                thumbnailImage.needsUploading = true;

                if (gameUploaded) {

                    saveImageButton.setEnabled(true);
                }

                imageSuccess.setVisible(false);

            } else {

                mainImage.bList.clear();
                byte[] b = Files.readAllBytes(imageFile.toPath());
                //we should save the byte array as well to upload it to the database
                mainImage.bList.add(b);

                ImageIcon newIcon = new ImageIcon(b);

                Image tempIcon = newIcon.getImage();

                image.setIcon(new ImageIcon(tempIcon.getScaledInstance(256, 126, 0)));
                mainImage.needsUploading = true;

                if (gameUploaded) {

                    saveImageButton.setEnabled(true);
                }

                imageSuccess.setVisible(false);

            }

        } catch (IOException ex) {

            System.out.println("Can not read file");
            ex.printStackTrace();

        }

    }

    /**
     * This method validates the game and if its valid this method will upload it to the database
     */
    public void validateGame() {

        //we are going to take all the validation we did before
        //but we are only going to take out the data changing
        //methods could be possible like with how we created accounts but with it ebing limited to only this one view id say keep it as is
        //and it may make working with data changing much more complex since we want to keep things consistent and work with previews
        gameExistsError.setVisible(false);
        //set this to invisible whenever we try to upload it again
        //also for when title and system cahnges just so it doesnt keep bothering a user trying to fix it

        if (!titleField.getText().isBlank()) {

            titleError.setVisible(false);

        } else {

            titleError.setVisible(true);

        }

        if (!descriptionField.getText().isBlank()) {

            descErrorLabel.setVisible(false);

        } else {

            descErrorLabel.setVisible(true);

        }

        if (systemBox.getSelectedIndex() == 0 || genreBox.getSelectedIndex() == 0) {

            sysGenErrorLabel.setVisible(true);

        } else if (systemBox.getSelectedIndex() != 0 && genreBox.getSelectedIndex() != 0) {

            sysGenErrorLabel.setVisible(false);

        }

        if ((int) quantityField.getValue() <= 0) {

            quantityError.setVisible(true);

        } else {

            quantityError.setVisible(false);

        }

        if (priceField.getText().isEmpty()) {

            priceError.setVisible(true);

        } else {

            priceError.setVisible(false);
        }

        //now that we have all the labels being messed with
        //lets see if any are visible
        //create a boolean
        boolean hasError = false;

        //after the booleans hs been created I want to check one thing
        //I want to check if it exists
        //if it does we will check if the the jlabel is vivsbile to say theres an error
        ///however, if we cant connect to the database anyway then I wll make sure has error is set to true
        String status = SQLManager.checkGame(titleField.getText(), systemBox.getSelectedItem().toString());

        if (status.equals("No")) {

            gameExistsError.setVisible(false);

        } else if (status.equals("Exists")) {

            gameExistsError.setVisible(true);

        } else {

            hasError = true;
            gameError.setVisible(true);

        }

        for (JLabel errorLabel : errorMessages) {

            if (errorLabel.isVisible()) {

                hasError = true;

            }

        }

        if (!hasError) {

            System.out.println(genreBox.getSelectedItem().toString());

            //now we can save it
            if (fromInv == true) {

                if (SQLManager.addGame(titleField.getText(), Float.parseFloat(priceField.getText()), genreBox.getSelectedItem().toString(), systemBox.getSelectedItem().toString(), (int) quantityField.getValue(), descriptionField.getText(), (int) restockField.getValue(), 0)) {

                    //now if we will upload the images as need be
                    //we will check if it has an image to upload first
                    //the best thing to do is call a method so we can recall it if the images are not successful
                    //before that lets try to get the game id as well
                    gameID = SQLManager.recieveID(titleField.getText(), systemBox.getSelectedItem().toString());

                    if (gameID != 0) {

                        uploadImages();

                    }

                    //make sure we know the game is uploaded
                    gameError.setVisible(false);
                    gameSuccess.setVisible(true);
                    gameUploaded = true;
                    disableItems();

                    //make sure to save the new game to the list of games if its from the inventory
                    Game newGame = new Game(titleField.getText(), Float.parseFloat(priceField.getText()), genreBox.getSelectedItem().toString(), systemBox.getSelectedItem().toString(), (int) quantityField.getValue(), gameID, descriptionField.getText(), (int) restockField.getValue(), 1);

                    games.add(newGame);

                } else {

                    gameError.setVisible(true);

                }

            } else {
                if (SQLManager.addGame(titleField.getText(), Float.parseFloat(priceField.getText()), genreBox.getSelectedItem().toString(), systemBox.getSelectedItem().toString(), (int) quantityField.getValue(), descriptionField.getText(), (int) restockField.getValue(), 1)) {

                    //now if we will upload the images as need be
                    //we will check if it has an image to upload first
                    //the best thing to do is call a method so we can recall it if the images are not successful
                    //before that lets try to get the game id as well
                    gameID = SQLManager.recieveID(titleField.getText(), systemBox.getSelectedItem().toString());

                    if (gameID != 0) {

                        uploadImages();

                    }

                    //make sure we know the game is uploaded
                    gameError.setVisible(false);
                    gameSuccess.setVisible(true);
                    gameUploaded = true;
                    disableItems();

                } else {

                    gameError.setVisible(true);

                }
            }
        }

    }

    /**
     * This uploads both images to the database
     */
    public void uploadImages() {

        //first we check what we need to upload
        if (thumbnailImage.needsUploading) {

            boolean deleteImage = false;
            int imageIndex = 0;

            //upload the thumbnail to the database
            if (SQLImages.uploadImage(gameID, 0, thumbnailImage.bList.get(0))) {
                byte[] imgBlob = (byte[]) SQLImages.retrieveImage(gameID, 0);

                //first make sure it doesnt exist incase we are changing it
                for (Object[] imageInfo : Lists.images) {

                    if ((int) imageInfo[0] == gameID) {

                        //were not done yet we need to see the type matches as well
                        if ((int) imageInfo[1] == 0) {

                            imageIndex = Lists.images.indexOf(imageInfo);
                            deleteImage = true;

                        }

                    }

                }

                //Delete the previous one if needed
                if (deleteImage) {

                    Lists.images.remove(imageIndex);

                }

                Object[] newInfo = {gameID, 0, imgBlob};
                Lists.images.add(newInfo);

                thumbnailImage.needsUploading = false;
                thumbnailError.setVisible(false);
            } else {

                thumbnailError.setVisible(true);

            }

        }

        if (mainImage.needsUploading) {

            boolean deleteImage = false;
            int imageIndex = 0;

            //upload the main image to the database
            if (SQLImages.uploadImage(gameID, 1, mainImage.bList.get(0))) {
                byte[] imgBlob = (byte[]) SQLImages.retrieveImage(gameID, 1);
                for (Object[] imageInfo : Lists.images) {

                    if ((int) imageInfo[0] == gameID) {

                        //were not done yet we need to see the type matches as well
                        if ((int) imageInfo[1] == 1) {

                            imageIndex = Lists.images.indexOf(imageInfo);
                            deleteImage = true;

                        }

                    }

                }

                //Delete the previous one if needed
                if (deleteImage) {

                    Lists.images.remove(imageIndex);

                }

                Object[] newInfo = {gameID, 1, imgBlob};
                Lists.images.add(newInfo);

                mainImage.needsUploading = false;
                mainImageError.setVisible(false);
            } else {

                mainImageError.setVisible(true);

            }

        }

        if (!mainImageError.isVisible() && !thumbnailError.isVisible()) {

            imageSuccess.setVisible(true);
            saveImageButton.setEnabled(false);

        } else {

            saveImageButton.setEnabled(true);

        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JSpinner amountBuying;
    private javax.swing.JLabel amountBuyingLabel;
    private javax.swing.JButton buyButton;
    private javax.swing.JLabel descErrorLabel;
    private javax.swing.JTextArea descriptionField;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JPanel gameCreation;
    private static javax.swing.JTextArea gameDescription;
    private Global.GameDisplay gameDisplay;
    private javax.swing.JLabel gameError;
    private javax.swing.JLabel gameExistsError;
    private static javax.swing.JLabel gameGenre;
    private static javax.swing.JPanel gamePanel;
    private javax.swing.JLabel gameSuccess;
    private static javax.swing.JLabel gameSystem;
    private static javax.swing.JTextArea gameTitle;
    private javax.swing.JComboBox<String> genreBox;
    private javax.swing.JLabel genreLabel;
    private static javax.swing.JLabel image;
    private javax.swing.JLabel imageSuccess;
    private javax.swing.JLayeredPane infoContainer;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton mainImageButton;
    private javax.swing.JLabel mainImageError;
    private javax.swing.JButton newGameButton;
    private static javax.swing.JLabel price;
    private javax.swing.JLabel priceError;
    private javax.swing.JTextField priceField;
    private javax.swing.JLabel priceLabel;
    private static javax.swing.JLabel quanity;
    private javax.swing.JLabel quantityError;
    private javax.swing.JSpinner quantityField;
    private javax.swing.JLabel quantityLabel;
    private javax.swing.JSpinner restockField;
    private javax.swing.JLabel restockLabel;
    private javax.swing.JButton returnButton;
    private javax.swing.JButton returnButton1;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton saveImageButton;
    private javax.swing.JLabel sysGenErrorLabel;
    private javax.swing.JComboBox<String> systemBox;
    private javax.swing.JLabel systemLabel;
    private javax.swing.JButton thumbnailButton;
    private javax.swing.JLabel thumbnailError;
    private javax.swing.JLabel titleError;
    private javax.swing.JTextArea titleField;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel totalLabel;
    // End of variables declaration//GEN-END:variables
}
